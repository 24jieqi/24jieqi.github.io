{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/typescript/TypeScript 笔记/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"af0743cb-3bd8-5a4c-8549-64430992c91b","excerpt":"Everyday Types 基本类型 以上是三种最基本的类型，在 TypeScript 中类型用小写开头 、 、  而大写开头的指类型名称、  和 （以大写字母开头）是合法的，但指的是一些很少出现在您的代码中的特殊内置类型。 数组 以上是数组的三种语法， 相当于泛型 ，  是元组类型。 any 类型 以上是 any…","html":"<h2>Everyday Types</h2>\n<h3>基本类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"wyq\"</span>\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>以上是三种最基本的类型，在 TypeScript 中类型用小写开头 <code class=\"language-text\">number</code>、 <code class=\"language-text\">string</code>、 <code class=\"language-text\">boolean</code> 而大写开头的指类型名称<code class=\"language-text\">String</code>、 <code class=\"language-text\">Number</code> 和 <code class=\"language-text\">Boolean</code>（以大写字母开头）是合法的，但指的是一些很少出现在您的代码中的特殊内置类型。</p>\n<h3>数组</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wyq\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>以上是数组的三种语法，<code class=\"language-text\">Array&lt;number></code> 相当于泛型 <code class=\"language-text\">T&lt;U></code>， <code class=\"language-text\">[number,string]</code> 是元组类型。</p>\n<h3>any 类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></code></pre></div>\n<p>以上是 any 类型，它可以是任意类型。</p>\n<h3>函数参数类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"!!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wyq\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确形式</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 错误形式，参数必须是字符串</span></code></pre></div>\n<h3>函数返回类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFavoriteNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFavoriteNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上是函数返回类型 api ，返回类型写在函数名后面。</p>\n<h3>匿名函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Eve\"</span><span class=\"token punctuation\">]</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> <span class=\"token string\">\"wyq\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>匿名函数与函数声明有点不同。当一个函数出现在 TypeScript 可以确定它将如何被调用的地方时，该函数的参数会自动指定类型。这个过程称为<em>上下文类型，<em>因为函数发生在其中的</em>上下文</em>通知它应该具有什么类型。</p>\n<h3>对象类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span>pt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The coordinate's x value is \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The coordinate's y value is \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 在这里，我们使用具有两个属性的类型注释参数 -x 和 y- 这两个属性都是 type number。您可以使用 , 或 ; 来分隔属性，最后一个分隔符是可选的。</span>\n<span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 可选属性类型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> last<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Object is possibly 'undefined'.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>last <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 联合类型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your ID is: \"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用联合类型时只能调用他们共同的方法，比如这里 number 和 string 都有 toString()，或者如下写法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> id <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In this branch, id is of type 'string'</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Here, id is of type 'number'</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>类型别名</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span>pt<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The coordinate's x value is \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The coordinate's y value is \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserInputSanitizedString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span></code></pre></div>\n<p>类型别名指的是类型用另一种名字来声明。</p>\n<h3>接口</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span>pt<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The coordinate's x value is \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The coordinate's y value is \"</span> <span class=\"token operator\">+</span> pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printCoord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// TypeScript 只关心我们传递给的值的结构 printCoord 它只关心它是否具有预期的属性。</span></code></pre></div>\n<p>类型别名和接口之间的差异：</p>\n<p>类型别名和接口非常相似，在很多情况下你可以自由选择它们。几乎所有的功能都在 interface 中可用 type，关键区别在于不能重新打开类型以添加新属性与始终可扩展的接口 。</p>\n<p><img src=\"https://www.hualigs.cn/image/61834f077188e.jpg\" alt=\"\"></p>\n<p><img src=\"https://www.hualigs.cn/image/61834f5980217.jpg\" alt=\"\"></p>\n<h3>类型断言</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 例如，如果您正在使用 document.getElementById，TypeScript 只知道这将返回某种类型的 HTMLElement，但您可能知道您的页面将始终具有 HTMLCanvasElement 具有给定 ID 的 。</span>\n\n<span class=\"token comment\">// 在这种情况下，您可以使用类型断言来指定更具体的类型：</span>\n<span class=\"token keyword\">const</span> myCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main_canvas\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLCanvasElement\n\n<span class=\"token comment\">// TypeScript 只允许类型断言转换为更具体或不太具体的类型版本。此规则可防止“不可能”的强制，例如：</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span> <span class=\"token comment\">// 这样报错原因</span>\n\n<span class=\"token comment\">// Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.</span>\n\n<span class=\"token comment\">// 有时，此规则可能过于保守，并且将不允许可能有效的更复杂的强制转换。如果发生这种情况，您可以使用两个断言，首先是 to any（或unknown，我们将在后面介绍），然后是所需的类型：</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> expr <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span></code></pre></div>\n<h3>特殊</h3>\n<p><img src=\"https://www.hualigs.cn/image/61834fca34273.jpg\" alt=\"\"></p>\n<p>这里 method 参数类型只能是 ”GET“，而 <code class=\"language-text\">req.method</code> 是 <code class=\"language-text\">string</code> 类型，解决办法如下：三种</p>\n<p><img src=\"https://www.hualigs.cn/image/61835025ebff2.jpg\" alt=\"\"></p>\n<p><img src=\"https://www.hualigs.cn/image/6183507324ff2.jpg\" alt=\"\"></p>\n<h3>null 和 undefined</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span> undefinded <span class=\"token operator\">=</span> undefinded</code></pre></div>\n<h3>非空断言运算符（后缀<code class=\"language-text\">!</code>）</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// TypeScript 也有一种特殊的语法 null，undefined 可以在不进行任何显式检查的情况下从类型中移除和移除类型。! 在任何表达式之后写入实际上是一种类型断言，即该值不是 nullor undefined：</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">liveDangerously</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// No error</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 这里 x 不加 ！后缀 TypeScript 就会推断它为 null。</span></code></pre></div>\n<h3>bigint 和 symbol</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> oneHundred<span class=\"token operator\">:</span> bigint <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只能是整数</span>\n<span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Symbol 唯一值 ES6 新增简单类型</span></code></pre></div>\n<h2>narrowing</h2>\n<h3>typeof 类型保护</h3>\n<p>正如我们所见，JavaScript 支持一个 <code class=\"language-text\">typeof</code> 运算符，它可以提供有关我们在运行时拥有的值类型的非常基本的信息。TypeScript 期望它返回一组特定的字符串：</p>\n<ul>\n<li><code class=\"language-text\">\"string\"</code></li>\n<li><code class=\"language-text\">\"number\"</code></li>\n<li><code class=\"language-text\">\"bigint\"</code></li>\n<li><code class=\"language-text\">\"boolean\"</code></li>\n<li><code class=\"language-text\">\"symbol\"</code></li>\n<li><code class=\"language-text\">\"undefined\"</code></li>\n<li><code class=\"language-text\">\"object\"</code></li>\n<li><code class=\"language-text\">\"function\"</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printAll</span><span class=\"token punctuation\">(</span>strs<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strs <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> s <span class=\"token keyword\">of</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Object is possibly 'null'.</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strs <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do nothing</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 该 strs 判断为 object 时它的值可能是 null</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0</span>\n<span class=\"token number\">NaN</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// （空字符串）</span>\n<span class=\"token number\">0n</span> <span class=\"token comment\">//（bigint零的版本）</span>\n<span class=\"token keyword\">null</span>\n<span class=\"token keyword\">undefined</span>\n<span class=\"token comment\">// 只有以上6个转为 Boolean 都为 false，其他全是 true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// type: boolean, value: true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"world\"</span> <span class=\"token comment\">// type: true,    value: true</span>\n<span class=\"token comment\">// 以上是两种转换 boolean的方法，!! 和 Boolean 的区别是各自转换之后的 type 一个范围狭隘，一个较大，如上述</span></code></pre></div>\n<h3>In</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fish</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">swim</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bird</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">fly</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>animal<span class=\"token operator\">:</span> Fish <span class=\"token operator\">|</span> Bird<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"swim\"</span> <span class=\"token keyword\">in</span> animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> animal<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> animal<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 以上 in 表示 swim 是不是存在于 annimal</span></code></pre></div>\n<h3>共同属性存在的缩小范围</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"circle\"</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"square\"</span>\n  sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Circle <span class=\"token operator\">|</span> Square\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// (parameter) shape: Circle</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"circle\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n\n    <span class=\"token comment\">// (parameter) shape: Square</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"square\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 以上是判断他们两个共同属性的值是什么来决定他们是哪一种类型，再去运用</span></code></pre></div>\n<h3>利用 never 缩小</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"circle\"</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"square\"</span>\n  sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Circle <span class=\"token operator\">|</span> Square\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"circle\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"square\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> _exhaustiveCheck<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> shape\n      <span class=\"token keyword\">return</span> _exhaustiveCheck\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// never 类型可分配给每一个类型，但是没有类型可以分配给 never （除了 never 它自己)，这意味着您可以使用缩小并依靠 never 打开在 switch 语句中进行详尽的检查。</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">\"triangle\"</span>\n  sideLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Circle <span class=\"token operator\">|</span> Square <span class=\"token operator\">|</span> Triangle\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"circle\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"square\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>sideLength <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">const</span> _exhaustiveCheck<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> shape\n      <span class=\"token comment\">// Type 'Triangle' is not assignable to type 'never'.</span>\n      <span class=\"token keyword\">return</span> _exhaustiveCheck\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 以上第二个案列是增加一个类型，没有给出具体 case 时会报错</span></code></pre></div>\n<h2>函数</h2>\n<h3>函数表达式</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token comment\">// 以上表示 fn 为一个参数为字符串类型，且无返回值的函数</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">GreetFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token comment\">// 使用类别名声明</span></code></pre></div>\n<h3>函数属性</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DescribableFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  description<span class=\"token operator\">:</span> <span class=\"token function\">string</span>\n  <span class=\"token punctuation\">(</span>someArg<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> DescribableFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>description <span class=\"token operator\">+</span> <span class=\"token string\">\" returned \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 以上是调用函数的属性和函数调用</span></code></pre></div>\n<h3>构造函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SomeConstructor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SomeObject\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>ctor<span class=\"token operator\">:</span> SomeConstructor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ctor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 以上是构造函数声明方式之一</span></code></pre></div>\n<h3>泛型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">firstElement</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token function\">firstElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 以 Type 做类型，使函数参数类型为 Type[]，返回值也是 Type</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Input<span class=\"token punctuation\">,</span> Output<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  arr<span class=\"token operator\">:</span> Input<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Input<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Output\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Output<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 以上是两个泛型这种</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">longest</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> b\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> longerArray <span class=\"token operator\">=</span> <span class=\"token function\">longest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 以上是使这个函数参数必须有 length 这个属性，且 length 必须是 number 类型</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">combine</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arr1<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr2<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Type 'string' is not assignable to type 'number' 报错</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 正确使用</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">combine</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>回调函数</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 为回调编写函数类型时，切勿编写可选参数，除非您打算在不传递该参数的情况下调用该函数，比如下面这样是不对的</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myForEach</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>函数重载</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeDate</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeDate</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeDate</span><span class=\"token punctuation\">(</span>mOrTimestamp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> mOrTimestamp<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>mOrTimestamp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">makeDate</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345678</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">makeDate</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> d3 <span class=\"token operator\">=</span> <span class=\"token function\">makeDate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span>\n、、 以上我们写了两个重载：一个接受一个参数，另一个接受三个参数。前两个签名称为重载签名。</code></pre></div>\n<h3>用数组当函数参数问题</h3>\n<p><img src=\"https://www.hualigs.cn/image/618350daa1ab3.jpg\" alt=\"\"></p>\n<p>以上数组 <code class=\"language-text\">args = [8, 5]</code> 函数 bbbb 只能是两个参数，当我利用 … 扩展符，让数组 args 为函数 bbbb 参数时 TypeScript 会报错，因为 TypeScript 默认 args 数组个数时可变的，所以解构去当参数是就会报错 TypeScript 判断这个数组可能会变化，比如 push 什么滴呀。如下为解决方案：</p>\n<p><img src=\"https://www.hualigs.cn/image/618350ff3ecda.jpg\" alt=\"\"></p>\n<p>解决方法：在 args 数组后面断言为 const，意思是这个数组只能是可读，不能改变，如下截图表示当断言 <code class=\"language-text\">as const</code> 时 TypeScript 翻译为 <code class=\"language-text\">readonly</code> 只能可读。</p>\n<p><img src=\"https://www.hualigs.cn/image/6183511b42311.jpg\" alt=\"\"></p>\n<h3>函数的 void</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">voidFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">const</span> f1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">voidFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 以上这样写类型函数是可以返回值的，不过一般 TypeScript 不关心</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Error：@ts-expect-error</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这样定义 void 那么这个函数一定不能有返回值所以这里是错误的</span></code></pre></div>\n<h2>对象类型</h2>\n<h3>声明对象类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 第一种对象形式</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第二种，接口形式</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第三种，类别名形式</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>可选属性运用</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 以上两种 name 是可选属性</span></code></pre></div>\n<h3>只读属性运用</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SomeType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> SomeType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">prop has the value '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// But we can't re-assign it.</span>\n  obj<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span> <span class=\"token comment\">// 报错，Cannot assign to 'prop' because it is a read-only property.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">以上是只读，不能改变它</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Home</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> resident<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">visitForBirthday</span><span class=\"token punctuation\">(</span>home<span class=\"token operator\">:</span> Home<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Happy birthday </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>home<span class=\"token punctuation\">.</span>resident<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  home<span class=\"token punctuation\">.</span>resident<span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 当有只读属性修饰时，不一定意味着该值是完全不可变的，比如上面这个列子，他是对象，对象里面的 key 和 key 对应的值是可以改变的</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReadonlyPerson</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">readonly</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> writablePerson<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Person McPersonface\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// works</span>\n<span class=\"token keyword\">let</span> readonlyPerson<span class=\"token operator\">:</span> ReadonlyPerson <span class=\"token operator\">=</span> writablePerson\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>readonlyPerson<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints '42'</span>\nwritablePerson<span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>readonlyPerson<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints '43'</span>\n<span class=\"token comment\">// 使用这样列子也可以改变可读属性</span></code></pre></div>\n<h3>索引签名</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringArray</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr<span class=\"token operator\">:</span> StringArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wyq1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wyq2\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 在不确定有多少属性时，这样就可以动态添加多个键值对，且重点索引签名属性类型必须是 “字符串” 或 “数字”</span></code></pre></div>\n<h3>接口继承</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Colorful</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ColorfulCircle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Colorful</span><span class=\"token punctuation\">,</span> Circle <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cc<span class=\"token operator\">:</span> ColorfulCircle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>交集类型 &#x26;</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">使用 <span class=\"token operator\">&amp;</span> 运算符定义交集类型。\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Colorful</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ColorfulCircle</span> <span class=\"token operator\">=</span> Colorful <span class=\"token operator\">&amp;</span> Circle<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 交集跟 interface的extends 区别在于这里的 ColorfulCircle固定了只能是 Colorful 和 Circle，而i nterface 的 extends 还可以继续添加扩展</span></code></pre></div>\n<h3>数组的元组类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> pair<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><img src=\"https://www.hualigs.cn/image/6183513f69a45.jpg\" alt=\"\"></p>\n<p>以上是元组有可选属性时</p>\n<p><img src=\"https://www.hualigs.cn/image/618351766adc0.jpg\" alt=\"\"></p>\n<p>以上是 point 时 readonly 只读形式，只读形式不可以赋值给 正常的数组形式，但是正常的数组形式可以赋值给只读形式如下图</p>\n<p><img src=\"https://www.hualigs.cn/image/618351b82d34a.jpg\" alt=\"\"></p>\n<h2>类型操作</h2>\n<h3>泛型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 以上是最简单的泛型列子，泛型可以使该函数复用，可以传入不同类型参数以达到复用</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myIdentity<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Input<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Input<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Input <span class=\"token operator\">=</span> identity\n<span class=\"token comment\">// 我们也可以为类型中的泛型类型参数使用不同的名称，只要类型变量的数量和类型变量的使用方式一致即可。</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myIdentity<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> identity\n<span class=\"token comment\">// 我们还可以将泛型类型写为对象字面量类型的调用签名</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myIdentity<span class=\"token operator\">:</span> GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> identity</code></pre></div>\n<h3>泛型类</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span>NumType<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  zeroValue<span class=\"token operator\">:</span> NumType\n  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> NumType<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> NumType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> NumType\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myGenericNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericNumber<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmyGenericNumber<span class=\"token punctuation\">.</span>zeroValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nmyGenericNumber<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 泛型类具有与泛型接口相似的形状。泛型类&lt;>在类名后面的尖括号 ( ) 中有一个泛型类型参数列表。</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getProperty</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token punctuation\">,</span> Key <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> Key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错：`Argument of type '\"m\"' is not assignable to parameter of type '\"a\" | \"b\" | \"c\" | \"d\"'`</span></code></pre></div>\n<h3>typeof</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> s\n<span class=\"token comment\">// 用 typeof 可以推断出一个值的类型，比如这里 s 是一个值它的类型是 string</span></code></pre></div>\n<h3>索引访问类型</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> alive<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Age 类型是： type Age = number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I1</span></span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// I1的类型是：type I1 = string | number</span>\n<span class=\"token comment\">// 这里有个 Preson 类型，然后我通过 Person['age'] 去获取到了 Person 的 age 的类型</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AliveOrName</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"alive\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I3</span></span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span>AliveOrName<span class=\"token punctuation\">]</span> <span class=\"token comment\">// I3类型是：type I3 = string | boolean</span>\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"age\"</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 报错不能用一个变量引用去这样获取类型</span>\n<span class=\"token comment\">// 这里通过类型 AliveOrName 去获取 Person 里的 alive 和 name 的类型，这里记住不能用一个变量的引用去类似的获取，只能是类型获取类型</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I2</span></span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">]</span> <span class=\"token comment\">// I2类型是：type I2 = string | number | boolean</span>\n<span class=\"token comment\">// 这里通过 keyof 去获取 Person 类型每个键的类型达到联合类型</span>\n</code></pre></div>\n<p><img src=\"https://www.hualigs.cn/image/618351e8c8cb3.jpg\" alt=\"\"></p>\n<p>以上是通过 数组索引去获取类型。</p>\n<h3>接口的合并</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n  scale<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> box<span class=\"token operator\">:</span> Box <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 以上达到合并</span></code></pre></div>\n<h3>合并命名空间</h3>\n<p><img src=\"https://www.hualigs.cn/image/6183521079c2c.jpg\" alt=\"\"></p>","frontmatter":{"title":"TypeScript 笔记","date":"2021-11-17","description":null,"author":"never-w"}},"previous":{"fields":{"slug":"/frontEnd/react/从 Vue、React 类组件角度看 Hooks/"},"frontmatter":{"title":"从 Vue、React 类组件角度看 Hooks"}},"next":{"fields":{"slug":"/frontEnd/graghql/Apollo GraphQL 使用流程/Apollo GraphQL 使用流程/"},"frontmatter":{"title":"Apollo GraphQL 使用流程"}}},"pageContext":{"id":"af0743cb-3bd8-5a4c-8549-64430992c91b","previousPostId":"315dabc7-d401-5762-a49c-f820c3f9e06c","nextPostId":"bb612230-043b-5743-8e1c-9ccaa6a6858a"}},"staticQueryHashes":["2841359383","3257411868"]}