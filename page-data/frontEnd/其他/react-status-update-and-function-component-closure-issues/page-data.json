{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/react-status-update-and-function-component-closure-issues/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"1c1bf967-ea45-5a7b-b871-3492b31d04ac","excerpt":"使用中的疑问 React 类组件中 setState 后为啥 this.state.xxx 没有变 React 函数组件中状态变量为啥没有更新 渲染组件、状态管理 这里我们将和 Vue 做对比，看看它们的差异。 Vue 和 React 类组件中都有一个特殊的字段、属性表示当前组件的状态，Vue…","html":"<p>使用中的疑问</p>\n<ul>\n<li>\n<p>React 类组件中 setState 后为啥 this.state.xxx 没有变</p>\n</li>\n<li>\n<p>React 函数组件中状态变量为啥没有更新</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React 类组件中 setState 后为啥 this.state.xxx 没有变</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeDemo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 为啥还是 0</span>\n    <span class=\"token comment\">// Vue 里面 this.xxx = 0 就立即变</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// React 函数组件中状态变量为啥没有更新</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SomeDemo2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> setNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>渲染组件、状态管理</h2>\n<blockquote>\n<p>这里我们将和 Vue 做对比，看看它们的差异。</p>\n</blockquote>\n<p>Vue 和 React 类组件中都有一个特殊的字段、属性表示当前组件的状态，Vue 采用 <code class=\"language-text\">data</code> 属性，函数返回一个状态对象（这里有一个小问题，为啥是函数返回一个对象而不是直接申明一个对象），后续更新使用 <code class=\"language-text\">this.状态字段 = 1</code> 的方式，React 类组件采用 <code class=\"language-text\">state</code> 属性管理状态，更新状态使用 <code class=\"language-text\">this.setState({ [状态字段]: 1 })</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 一个 Vue 组件</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 一个 React 类组件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeVar</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>组件渲染流程，这里以 React 举例，Vue 流程相似，细节不同。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/15/16f0a0b3e20fa9aa~tplv-t2oaga2asx-watermark.awebp\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 渲染组价到一个正式的 DOM 节点上</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SomeVar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//------ 一个类组件 简单的模拟过程 start</span>\n<span class=\"token comment\">// 找到组件 生成组件实例</span>\n<span class=\"token comment\">// 此时响应 constructor 构造函数里面的操作，例如设置初始值之类的</span>\n<span class=\"token keyword\">const</span> someVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> xxx <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 开始响应生命周期 getDerivedStateFromProps</span>\n\n<span class=\"token comment\">// 开始第一次渲染（可以在此与 ref 关联）</span>\n<span class=\"token keyword\">const</span> someVDOM <span class=\"token operator\">=</span> someVar<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 挂载节点，触发 componentDidMount</span>\n\n<span class=\"token comment\">// 如果有更新，按更新时生命周期触发</span>\n<span class=\"token comment\">// 生产新的 VDOM，新旧 VDOM 对比，找到差异项生成对应增删改操作</span>\n<span class=\"token comment\">//------ 一个类组件 简单的模拟过程 end</span></code></pre></div>\n<p>React 类组件的 <code class=\"language-text\">setState</code> 函数接受一个部分状态字段的对象，函数内部和完整的状态对象做合并，简单看作是 <code class=\"language-text\">{ ...oldState, ...newState }</code> 合并过程。按理说合并就完事了，啷个不是立即更新，怎么回事。</p>\n<p>这里需要注意，React 更新是把整个 VDOM 进行一次对比，如果某一个事件、操作多次更新状态，就会有多次对比，为了更好的响应、性能优化，就做一个批量处理，n 次 <code class=\"language-text\">setState</code> 只做一次更新，「节流」最佳场景。</p>\n<p>于是在 React 类组件中不会立即更新 <code class=\"language-text\">state</code> 的值。</p>\n<p>为啥 Vue 就可以，原因是 Vue React 触发更新的机制不同，Vue 自动监听属性变更的方式（了解一下 Vue 数据劫持、订阅发布），React 是主动触发。</p>\n<p>Vue 中 this.xxx = xxx 的时候，它是真直接改变值，附带触发更新，所以是同步的。</p>\n<p>React <code class=\"language-text\">setState</code> 告诉 React 派发一次更新，多次 <code class=\"language-text\">setState</code> 会合并，所以 <code class=\"language-text\">state</code> 变化是异步的。有没有哪种场景 React 也是同步更新呢，可以多了解一下。</p>\n<h2>React 函数组件不同的地方</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SomeVar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 每次重新渲染的时候，这个变量都要重新声明</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 使用 useCallback 可以持久化</span>\n  <span class=\"token comment\">// 在某些操作中 setState 更新了 state，再触发这个回调，会打印什么？</span>\n  <span class=\"token comment\">// 这里始终打印的是初始化值 -> {} 为什么呢？闭包。</span>\n  <span class=\"token comment\">// 在 useCallback 没有依赖/依赖是空数组时，只允许实例一次，state 就不会更新，指向的地址始终是初始化的那个对象/字符串</span>\n  <span class=\"token comment\">// setState 做更新地址的过程</span>\n  <span class=\"token comment\">// 如果想要使用最新的 state，就需要把 state 放到 useCallback 依赖里，每次 state 更新就重新声明一个函数</span>\n  <span class=\"token comment\">// 有时候操作 state 频繁，这种时候再使用 useCallback 包裹就没有意义</span>\n  <span class=\"token keyword\">const</span> onClick2 <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 函数内使用了一个不频繁更新的状态值、无状态，可以使用 useCallback</span>\n    <span class=\"token comment\">// 函数内使用了频繁更新的状态，不建议使用 useCallback</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// [state.a]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SomeVar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 没有实例化的过程</span>\n<span class=\"token keyword\">const</span> someVDOM <span class=\"token operator\">=</span> <span class=\"token function\">SomeVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 更新</span>\n<span class=\"token keyword\">const</span> newSomeVDOM <span class=\"token operator\">=</span> <span class=\"token function\">SomeVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 新旧 VDOM 对比 更新</span></code></pre></div>\n<p>如果有兴趣深入了解可以看看 <a href=\"https://react.iamkasong.com\">React 技术揭秘</a>。</p>\n<h2>闭包</h2>\n<p>什么是闭包，简单说是保持一个变量持续引用，该变量无法被回收。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> computeNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">CACHE</span><span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">CACHE</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">CACHE</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 复杂计算</span>\n    <span class=\"token constant\">CACHE</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">CACHE</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这就是一个比较常见的闭包，利用一个对象缓存值，重复计算的数值可以快速拿到值。</p>\n<p>简单模拟一下 useCallbeck。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UseCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * { [1,2]: 60, [2,2]: 100 }\n   * 普通对象的 key 只能是字符串，我想要的 key 是数组，用 Map\n   * [{a: 1}] 可以和 [{a: 1}] 对比\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">CACHE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//判断是否更新</span>\n      <span class=\"token keyword\">let</span> _fn\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token constant\">CACHE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> deps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d <span class=\"token operator\">===</span> key<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _fn <span class=\"token operator\">=</span> value\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _fn <span class=\"token operator\">=</span> fn\n        <span class=\"token constant\">CACHE</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> _fn\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> fn\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 模仿/模拟 React useCallback</span>\n<span class=\"token keyword\">const</span> useCallback <span class=\"token operator\">=</span> <span class=\"token function\">UseCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 每次都更新</span>\n<span class=\"token keyword\">const</span> fn1 <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 只声明一次</span>\n<span class=\"token comment\">// const fn2 = useCallback(() => {}, [])</span>\n\n<span class=\"token comment\">// 根据依赖动态更新</span>\n<span class=\"token keyword\">const</span> fn2 <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 根据依赖动态更新</span>\n<span class=\"token keyword\">const</span> fn3 <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"React 状态更新、函数组件闭包问题小总结","date":"2021-12-06","description":null,"author":"骷髅王"}},"previous":{"fields":{"slug":"/frontEnd/graghql/playground 接口文档到 Postman/playground 接口文档到 Postman/"},"frontmatter":{"title":"playground 接口文档到 Postman"}},"next":{"fields":{"slug":"/frontEnd/react/react学习资源汇总/"},"frontmatter":{"title":"React 学习资源汇总"}}},"pageContext":{"id":"1c1bf967-ea45-5a7b-b871-3492b31d04ac","previousPostId":"a639f4e0-ba41-5aa3-956c-57f0ec2fe7ad","nextPostId":"d32f29f6-22e9-5577-a27b-d5b707f1cca8"}},"staticQueryHashes":["2841359383","3257411868"]}