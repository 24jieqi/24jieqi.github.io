{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/less使用/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"d88a7a92-be9b-55b3-aeea-570cd2e8fc15","excerpt":"CSS in Typescript（关于解决 react 中不能识别.scss 文件和 module 问题）：\nhttps://juejin.cn/post/6844903560056930311#heading-3\n​ 一、配置安装 ​ 二、变量使用 三、混合（Mixins） 混合（Mixin…","html":"<p><strong>CSS in Typescript（关于解决 react 中不能识别.scss 文件和 module 问题）：</strong>\n<a href=\"https://juejin.cn/post/6844903560056930311#heading-3\">https://juejin.cn/post/6844903560056930311#heading-3</a>\n​</p>\n<h2>一、配置安装</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//安装\nyarn add --save less less-loader\n\n//安装指定版本\nnpm install less@2.7.1 -g\n\n//查看版本\nlessc -v\nlessc --version</code></pre></div>\n<p>​</p>\n<h2>二、变量使用</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 全局变量\n@color:#CBCB41;\n\n#wordStyle{\n    font-size: 25px;\n    text-decoration: line-through;\n    //使用\n    color:@color;\n    // 局部变量\n    @font:30px;\n}</code></pre></div>\n<h2>三、混合（Mixins）</h2>\n<p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：\n​</p>\n<p>定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.bordered {\n   \t \tborder-top: dotted 1px black;\n\t\t\tborder-bottom: solid 2px black;\n}</code></pre></div>\n<p>使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#menu a {\n\t\tcolor: #111;\n\t\t.bordered();\n}\n\n.post a {\n\t\tcolor: red;\n\t\t.bordered();\n}\n\n.bordered 类所包含的属性就将同时出现在 #menu a 和 .post a 中了。</code></pre></div>\n<h2>四、嵌套（Nesting）</h2>\n<p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下 CSS 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#header {\n  color: black;\n}\n#header .navigation {\n  font-size: 12px;\n}\n#header .logo {\n  width: 300px;\n}</code></pre></div>\n<p>用 Less 语言我们可以这样书写代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#header {\n  color: black;\n  .navigation {\n    font-size: 12px;\n  }\n  .logo {\n    width: 300px;\n  }\n}\n</code></pre></div>\n<p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p>\n<p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个经典的 clearfix 技巧，重写为一个混合（mixin） (&#x26; 表示当前选择器的父级）：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.clearfix {\n  display: block;\n  zoom: 1;\n\n  &amp;:after {\n    content: \" \";\n    display: block;\n    font-size: 0;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n  }\n}</code></pre></div>\n<h2>五、@规则嵌套和冒泡</h2>\n<p>@ 规则（例如 <a href=\"/media\">@media </a> 或 @supports）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.component {\nwidth: 300px;\n@media  (min-width: 768px) {\nwidth: 600px;\n@media   (min-resolution: 192dpi) {\nbackground-image: url(/img/retina2x.png);\n}\n}\n@media  (min-width: 1280px) {\nwidth: 800px;\n}\n}</code></pre></div>\n<p>编译为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.component {\nwidth: 300px;\n}\n@media  (min-width: 768px) {\n.component {\nwidth: 600px;\n}\n}\n@media  (min-width: 768px) and (min-resolution: 192dpi) {\n.component {\nbackground-image: url(/img/retina2x.png);\n}\n}\n@media  (min-width: 1280px) {\n.component {\nwidth: 800px;\n}\n}</code></pre></div>\n<h2></h2>\n<p>六、运算（Operations）</p>\n<p>算术运算符 +、-、*、/ 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p>\n<p>// 所有操作数被转换成相同的单位\n@conversion-1: 5cm + 10mm; // 结果是 6cm\n@conversion-2: 2 - 3cm - 5mm; // 结果是 -1.5cm</p>\n<p>// conversion is impossible\n@incompatible-units: 2 + 5px - 3cm; // 结果是 4px</p>\n<p>// example with variables\n@base: 5%;\n@filler: <a href=\"/base\">@base </a> * 2; // 结果是 10%\n@other: <a href=\"/base\">@base </a> + @filler; // 结果是 15%\n乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义，一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p>\n<p>@base: 2cm * 3mm; // 结果是 6cm\n你还可以对颜色进行算术运算：</p>\n<p>@color: #224488 / 2; //结果是 #112244\nbackground-color: #112244 + #111; // 结果是 #223355\n不过，Less 提供的 色彩函数 更有使用价值。</p>\n<h2>七、calc() 特例</h2>\n<p>Released v3.0.0</p>\n<p>为了与 CSS 保持兼容，calc() 并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</p>\n<p>@var: 50vh/2;\nwidth: calc(50% + (<a href=\"/var\">@var </a> - 20px));  // 结果是 calc(50% + (25vh - 20px))</p>\n<h2></h2>\n<p>八、转义（Escaping）</p>\n<p>转义（Escaping）允许你使用任意字符串作为属性或变量值。任何 ~“anything” 或 ~‘anything’ 形式的内容都将按原样输出，除非 interpolation。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@min768: ~\"(min-width: 768px)\";\n.element {\n@media  @min768  {\nfont-size: 1.2rem;\n}\n}</code></pre></div>\n<p>编译为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@media  (min-width: 768px) {\n.element {\nfont-size: 1.2rem;\n}\n}\n注意，从 Less 3.5 开始，可以简写为：\n\n@min768: (min-width: 768px);\n.element {\n@media  @min768  {\nfont-size: 1.2rem;\n}\n}</code></pre></div>\n<h2>八、函数（Functions）</h2>\n<p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在 Less 函数手册中有详细介绍。</p>\n<p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@base: #f04615;\n@width: 0.5;\n\n.class {\nwidth: percentage(@width); // returns 50%\ncolor: saturate(@base, 5%);\nbackground-color: spin(lighten(@base, 25%), 8);\n}</code></pre></div>\n<h2>九、混合（mixins）进行分组</h2>\n<p>​</p>\n<p>有时，出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组。你可以用 Less 更直观地实现这一需求。假设你希望将一些混合（mixins）和变量置于 #bundle 之下，为了以后方便重用或分发：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#bundle() {\n  .button {\n    display: block;\n    border: 1px solid black;\n    background-color: grey;\n    &amp;:hover {\n      background-color: white;\n    }\n  }\n  .tab {\n    ...;\n  }\n  .citation {\n    ...;\n  }\n}\n</code></pre></div>\n<p>现在，如果我们希望把 .button 类混合到 #header a 中，我们可以这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#header a {\n  color: orange;\n  #bundle.button(); // 还可以书写为 #bundle > .button 形式\n}\n</code></pre></div>\n<p>注意：如果不希望它们出现在输出的 CSS 中，例如 #bundle .tab，请将 () 附加到命名空间（例如 #bundle()）后面。</p>\n<h2>十、映射（Maps）</h2>\n<p>从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#colors() {\n  primary: blue;\n  secondary: green;\n}\n\n.button {\n  color: #colors[primary];\n  border: 1px solid #colors[secondary];\n}\n</code></pre></div>\n<p>输出符合预期：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.button {\n\tcolor: blue;\n\tborder: 1px solid green;\n}</code></pre></div>\n<h2>十一、作用域（Scope）</h2>\n<p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}</code></pre></div>\n<p>与 CSS 自定义属性一样，混合（mixin）和变量的定义不必在引用之前事先定义。因此，下面的 Less 代码示例和上面的代码示例是相同的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@var: red;\n\n#page {\n  #header {\n    color: @var; // white\n  }\n  @var: white;\n}</code></pre></div>\n<h2>十二、注释（Comments）</h2>\n<p>块注释和行注释都可以使用：</p>\n<p>/* 一个块注释</p>\n<ul>\n<li>style comment! */\n@var: red;</li>\n</ul>\n<p>// 这一行被注释掉了！\n@var: white;</p>\n<h2></h2>\n<p>十三、导入（Importing）</p>\n<p>“导入”的工作方式和你预期的一样。你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less 扩展名，则可以将扩展名省略掉：</p>\n<p><a href=\"/import\">@import </a> “library”; // library.less\n<a href=\"/import\">@import </a> “typo.css”;\n​</p>\n<h2>十四、:global 的使用</h2>\n<p>使用 global 声明的 class，都不会被编译成哈希字符串。\n​</p>\n<p>注意：修改 antd 时，应给:global 外层包裹一个 class，这样才不会影响到其它的组件\n​</p>\n<p>​</p>","frontmatter":{"title":"less的使用","date":"2022-01-26","description":null,"author":"chang"}},"previous":{"fields":{"slug":"/frontEnd/其他/git的使用/"},"frontmatter":{"title":"git的使用"}},"next":{"fields":{"slug":"/frontEnd/其他/react与typescript学习资源汇总/"},"frontmatter":{"title":"react 与 typescript 学习资源汇总"}}},"pageContext":{"id":"d88a7a92-be9b-55b3-aeea-570cd2e8fc15","previousPostId":"c086ef4e-5a50-5d31-9931-29cd3848dd9c","nextPostId":"55ada83f-1871-5ed9-8c4a-140841254585"}},"staticQueryHashes":["2841359383","3257411868"]}