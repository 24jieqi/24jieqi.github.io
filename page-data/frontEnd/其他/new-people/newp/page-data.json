{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/new-people/newp/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"8c59608c-190c-5129-9bf5-686560837225","excerpt":"应领导的安排，写一个前端新人快速成长的指南。由于我经验也不是特别充足，与其说是成长指南，不如说是自己的成长经历和总结。  一：初识前端 第一次正式接触前端是 18 年的春天，大三下学期。因为临近毕业对未来充满的担忧就想着要学一门技术，因为大学时期也学过各种编程语言，感觉对前端的兴趣更加大一点，就选择了 Web…","html":"<p>应领导的安排，写一个前端新人快速成长的指南。由于我经验也不是特别充足，与其说是成长指南，不如说是自己的成长经历和总结。</p>\n<h1></h1>\n<h2>一：初识前端</h2>\n<p>第一次正式接触前端是 18 年的春天，大三下学期。因为临近毕业对未来充满的担忧就想着要学一门技术，因为大学时期也学过各种编程语言，感觉对前端的兴趣更加大一点，就选择了 Web 前端。当时选择了腾讯课堂的渡一教育前端相关课程，都是免费课程，就直接开始了学习。讲课的是前阿里巴巴工程师 - 姬成，是一个很有趣，思路特别清醒，技术有深度的一个人，听了他一节课，我就对前端产生了浓厚的兴趣。有体系的学习了 HTML、CSS、JavaScript 前端三件套，这是在这个时候打了比较好的前端基础。了解了很多大部分人都不清楚的高级概念如：</p>\n<ul>\n<li>Css: 选择器权重，BFC；</li>\n<li>JS：预编译，原型链，闭包，作用域。</li>\n</ul>\n<p>经过三个月左右的学习，我基本上入了前端的门槛，基础还算比较扎实。在学习的过程中也写过一些 Demo：</p>\n<ul>\n<li>淘宝首页：学完 css 就进行这了项练习，写到了凌晨 3-4 点，写完的那一刻获得了极大的成就感，坚定了后续的路。</li>\n<li>轮播图：学完 JS 用 DOM 相关知识封装的轮播器，通过配置参数，就可以自动生成轮播器。</li>\n<li>选择卡片等等功能。</li>\n</ul>\n<p>​</p>\n<p>** 总结：基础知识学习最好成体系的学习，在学习的过程中要多练，多思考。 只有成体系的学习才会有牢固的基础。**</p>\n<p>​</p>\n<h2>二：快速提升</h2>\n<p>学习完基础课程后，觉得渡一教育不错，就付费买了他们的后续课程。后续课程就是学习一些工作实际的技能了。后续就紧接着学了，ES5，网络协议、JQuery、CSS3、HTML5、webpack、一些方法的源码实现、设计模式、小程序、Vue2、Node，ES6。这段时间学习的途径比较杂，视频、博客、书籍、GitHub，从 8 月一直持续到 19 年 2 月份。这段时间是快速成长期，学习了很多工作必要的相关知识。这一阶段就感觉是在提升知识的广度，学习的内容很杂，并且不够深入。给人的感觉是工作后需要用到什么再深入的学习。之前体系学习前端基础的优势体现出来了，在这一阶段的学习中接受新的知识更快，学习源码实现也显得更加容易。配合一定的练习可以快速的入门。\n​</p>\n<p><strong>总结：在有了好的前端基础后，应该扩宽自己的技术广度，当需要时，再成体系的、深入的学习相关知识。</strong>\n<strong>​</strong></p>\n<h2>三：初入工作</h2>\n<h3>1.Vue 技术栈的工作</h3>\n<p>这家公司的业务比较简单，使用 Vue 技术栈，入职不久老员工就离职了，工作一个月唯一的收获就是写了一些业务，写代码的速度更快了。</p>\n<h3>2.Angular 技术栈的工作</h3>\n<p>因为朋友推荐来这家使用 angular 技术栈的公司，这时候 JS 基础好的优势体现出来了。我很快的上手了 Angular 框架，Angular 是纯 TypeScript 的框架，由于之前我学会 ES6，所以只需要花半天时间看下 TypeScript 和看下 Angular 的官方文档就可以进行开发工作了。</p>\n<ul>\n<li>这家公司的开发规范更加完善，业务复杂度更高。会走一整套代码审核机制。从 tslint, stylelint, git flow 到 CI/CD 到代码审核，通过代码审核机制，快速的纠正了很多错误的编程习惯。</li>\n<li>阅读之前的大佬的代码，学到很多优雅的写法和工具类的实现。</li>\n<li>更高的业务复杂度，一开始只是修改 bug。因为组件抽象度很高，业务复杂度很高，在修改 bug 的时候，培养了自己快速定位问题和阅读复杂代码的能力。后续需要自己去实现复杂的功能时，需要考虑到扩展性和功能拆分，也进一步的提升了自己的能力。</li>\n</ul>\n<p>这家公司的工作在 2019 年的时候并不是特别饱和，常有比较空闲的时候，在 2019 年 9 月左右我开始算法的学习。学习了很多数据结构如队列、栈、二叉树、堆、AVL 树、图，通用 javaScript 实现这些数据结构，不仅学到了原理，同时也加深了我对 TS 中泛型的理解。\n​</p>\n<p>** 总结：去一家技术规范完善， 在工作中业务不繁忙的时候，自己要抽空学习。订好自己的学习计划，慢慢的去执行。 **\n<strong>​</strong></p>\n<p><strong>​</strong></p>\n<h2>四：最后</h2>\n<p>当工作时间拉长，一般就会开始成为一个项目独立或者主力的开发人员，这样时候会遇到各种奇奇怪怪的需求，需要参与业务需求的讨论、需要对接三方接口、需要使用三方工具、需要去做未知技术的调研。通常情况就是给你比较短的时候要拿下一个功能，所以一是看平时的技术积累，二是看自己的基础是否扎实，学习东西是否快速 。这个时候考验的其实基础、学习力和解决问题的能力。面对自己没有接触的东西要钻研精神，勇于克服。\n​</p>\n<h2>五：总结</h2>\n<ul>\n<li>扎实的基础</li>\n<li>拓宽知识面</li>\n<li>详细的职业规划</li>\n<li>足够的学习力</li>\n<li>勇于面对困难的钻研精神</li>\n</ul>\n<p>做好以上几点就可以在前端的世界遨游了，共勉。</p>","frontmatter":{"title":"前端新人成长参考","date":"2021-11-02","description":null,"author":"humuxue"}},"previous":{"fields":{"slug":"/frontEnd/其他/commitlint/commitlint/"},"frontmatter":{"title":"commitlint提交规范"}},"next":{"fields":{"slug":"/frontEnd/nodejs/Node.js 转换 Markdown 并且语法高亮/"},"frontmatter":{"title":"Node.js 转换 Markdown 并且语法高亮"}}},"pageContext":{"id":"8c59608c-190c-5129-9bf5-686560837225","previousPostId":"5af984f2-2339-5ddd-8cf7-0a4ebfa045ab","nextPostId":"6a7fd9b7-2980-5fe9-831d-29a54cc80521"}},"staticQueryHashes":["2841359383","3257411868"]}