{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/状态管理zustand/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"6688c6f0-9493-5ec1-9ac1-3a60c2bec0a0","excerpt":"一、状态管理的概念 了解更多状态管理：https://github.com/pmndrs/zustand\n\n 1.1 为什么要用状态管理： 对于更复杂的 Web…","html":"<h3>一、状态管理的概念</h3>\n<p>了解更多状态管理：<a href=\"https://github.com/pmndrs/zustand\">https://github.com/pmndrs/zustand</a>\n<a href=\"https://blog.csdn.net/weixin_44777255/article/details/120276532\">\n</a></p>\n<h4>1.1 为什么要用状态管理：</h4>\n<p>对于更复杂的 Web 应用来说，一个状态可能影响到页面数十个部分，我们就需要对状态的维护更新机制进行设计，将状态的维护从页面进行解耦，独立到全局来进行，则将这种状态称之为全局状态。显然，对于局部状态来说，页面局部可以完成自治，而对于全局状态来说，则需要一个全局中心化“数据库”来进行管理。\n​</p>\n<h4>1.2 状态管理主要的两个方面职能：</h4>\n<ol>\n<li>**数据的共享：**在 React 应用中，在组件间优雅的共享一些数据并非易事，而各种状态管理工具都给出了自己对“数据共享”的标准方案</li>\n<li>**逻辑的组织：**状态不单单是数据项的堆砌，更重要的是把各项数据之间的逻辑、数据与其他系统模块之间的互动逻辑进行组织，例如 A 需要在用户点击按钮时发生变化，而 B 又需要在 A 变化时跟着变化（可能是同步的也可能是异步的）</li>\n</ol>\n<h3>二、 基本用法</h3>\n<p>声明一个到多个 store ，并在不同组件中使用\n（1）安装配置</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install zustand #或 yarn add zustand</code></pre></div>\n<p>（2）创建初始数据和更新数据的方法</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import create from 'zustand'\n\n// Store\nconst useStore = create&lt;ListState>((set, get) => ({\n  formStyle: \"update\",\n  selectItems: [],\n  finishSelect: () => {\n    const { listData, selectItems } = get();\n\n    set({\n      listData: listData.map((v) => {\n        return {\n          ...v,\n          isFinish: selectItems?.includes(v?.key) ? true : v.isFinish,\n        };\n      }),\n    });\n  },\n\n  deleteSelect: () => {\n    const { listData, selectItems } = get();\n\n    set({ listData: listData.filter((v) => !selectItems?.includes(v?.key)) });\n  },\n}));</code></pre></div>\n<p>(3)在其他组件使用时，导入 useStore</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> import useStore from \"../zustand\";\n\n //获取store里面的方法和数据\n  const { deleteSelect, finishSelect, listData, selectItems, toDoType } =useStore();\n  const { setState } = useStore;</code></pre></div>\n<h3>三、setState、getState 方法的运用</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> // 1. 获取方法 执行逻辑\n  const { setLoading } = useStore.getState();\n\n// 2. 直接通过 setState 修改状态\n  useStore.setState({ loading: false });</code></pre></div>\n<h3>四、订阅的功能理解</h3>\n<p>带有选择器的订阅 subscribeWithSelector middleware<br>\n​</p>\n<p>4.1 中间件 subscribe 使用规范：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">subscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\noption------可选</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//导入subscribeWithSelector\nimport { subscribeWithSelector } from 'zustand/middleware'\n\n//创建store\nconst useStore = create(subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })))\n\n// 监听paw的改变\nconst unsub2 = useStore.subscribe(state => state.paw, console.log)\n\n// 通过第二个回调参数， 可以获取到paw改变前的值\nconst unsub3 = useStore.subscribe(state => state.paw, (paw, previousPaw) => console.log(paw, previousPaw))\n\n\nconst unsub4 = useStore.subscribe(state => [state.paw, state.fur], console.log, { equalityFn: shallow })\n\n// 解除监听\nconst unsub5 = useStore.subscribe(state => state.paw, console.log, { fireImmediately: true })</code></pre></div>\n<h3>​</h3>\n<h3>五、 中间件的概念，持久化并在 todo 中使用</h3>\n<h4>5.1 中间件概念</h4>\n<p>处理 Web 请求时，我们常常需要进行验证请求来源、检查登录状态、确定是否有足够权限、打印日志等操作，而这些重复的操作如果写在具体的路由处理函数中，明显会导致代码冗余，这个时候，我们就可以将这些通用的流程抽象为中间件函数，减少重复代码。\n我们可以将 Web 请求想象为一条串联的管道，在管道中有多个关卡，请求数据由源头起，依次流过各关卡，每个关卡独立运作，既可以直接响应数据，又可以对请求稍作调整，并使之流向下一关卡，这个关卡，就是中间件。\n​</p>\n<h4>5.2 持久化中间件 persist</h4>\n<ul>\n<li>\n<p>该持久化中间件，您可以存储在（例如，您 Zustand 状态 localStorage，AsyncStorage，IndexedDB，等…），因此持久化它的数据。</p>\n</li>\n<li>\n<p>请注意，该中间件确实支持同步存储（例如 localStorage）和异步存储（例如 AsyncStorage），但是使用异步存储确实会带来成本。</p>\n</li>\n</ul>\n<p>​</p>\n<p><strong>使用：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) => ({\n    fishes: 0,\n    addAFish: () => set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () => sessionStorage, // (optional) by default, 'localStorage' is used\n  }\n))</code></pre></div>\n<p><strong>选项：</strong>\n<strong>​</strong></p>\n<p><strong>name</strong>\n这是唯一需要的选项。给定的名称将是用于在存储中存储您的 Zustand 状态的键，因此它必须是唯一的。\n​</p>\n<p><strong>getStorage</strong>\n默认： () => localStorage\n使您能够使用自己的存储。只需传递一个函数，该函数返回您要使用的存储。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export  const  useStore  =  create ( persist (\n  ( set ,  get )  =>  ( {\n    // ...\n  } ) ,\n  {\n    // ...\n    getStorage : ( )  =>  sessionStorage ,\n  }\n) )</code></pre></div>\n<p>​</p>\n<p>给定的存储必须与以下接口匹配：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface Storage {\n  getItem: (name: string) => string | null | Promise&lt;string | null>\n  setItem: (name: string, value: string) => void | Promise&lt;void>\n  removeItem: (name: string) => void | Promise&lt;void>\n}</code></pre></div>\n<p>​</p>\n<p>​</p>","frontmatter":{"title":"状态管理zustand","date":"2022-01-26","description":null,"author":"chang"}},"previous":{"fields":{"slug":"/frontEnd/其他/react与typescript学习资源汇总/"},"frontmatter":{"title":"react 与 typescript 学习资源汇总"}},"next":{"fields":{"slug":"/frontEnd/其他/css/"},"frontmatter":{"title":"css学习笔记"}}},"pageContext":{"id":"6688c6f0-9493-5ec1-9ac1-3a60c2bec0a0","previousPostId":"55ada83f-1871-5ed9-8c4a-140841254585","nextPostId":"fae32203-42a7-598a-9559-c512816a233b"}},"staticQueryHashes":["2841359383","3257411868"]}