{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/css/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"fae32203-42a7-598a-9559-c512816a233b","excerpt":"​ 一、css 选择器，优先级 1.1 标签选择器 div p span … 1.2 id 选择器 #符号标记\n特点：id 名是独一无二的\n​ 1.3 类选择器 .符号标记\n特点：类名可以是多个 多个类名直接用空格隔开\n​ 1.4 通配符选择器 *符号标记\n运用场景：消除浏览器默认样式 ​ 1.5 伪类选择器…","html":"<p>​</p>\n<h2>一、css 选择器，优先级</h2>\n<h3>1.1 标签选择器</h3>\n<p>div p span …</p>\n<h3>1.2 id 选择器</h3>\n<p>#符号标记\n特点：id 名是独一无二的\n​</p>\n<h3>1.3 类选择器</h3>\n<p>.符号标记\n特点：类名可以是多个 多个类名直接用空格隔开\n​</p>\n<h3>1.4 通配符选择器</h3>\n<p>*符号标记\n运用场景：消除浏览器默认样式</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* {\n  margin: 0;\n  padding: 0;\n}\n\n在实际业务中，最好选定标签来去掉默认间距，性能更好</code></pre></div>\n<p>​</p>\n<h3>1.5 伪类选择器</h3>\n<h4>1、链接伪类选择器</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a:link /*未访问的链接*/\na:visited /*已访问的链接*/\na:hover /*鼠标移动到链接上*/\na:active /*选定的链接*/\n::selection：鼠标选中的元素</code></pre></div>\n<p>注意：</p>\n<ol>\n<li>a:hover 必须在 a:link 和 a:visited 之后。</li>\n<li>a:active 必须在 a:hover 之后，需要严格按顺序才能看到效果。</li>\n</ol>\n<p>所以，写的时候顺序尽量不要颠倒，按照<strong>l</strong> o <strong>v</strong> e **ha **t e 来记忆</p>\n<h4></h4>\n<h4>2、条件伪类</h4>\n<ul>\n<li>:lang()：基于元素语言来匹配页面元素；</li>\n<li>:dir()：匹配特定文字书写方向的元素；</li>\n<li>:has()：匹配包含指定元素的元素；</li>\n<li>:is()：匹配指定选择器列表里的元素；</li>\n<li>:not()：用来匹配不符合一组选择器的元素；</li>\n</ul>\n<h5>:not 伪类选择器</h5>\n<p>案例：实现除了 span 和 p 标签，其它的字体颜色变成蓝色，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//html\n\n&lt;div>\n    &lt;span>我是蓝色&lt;/span>\n    &lt;p>我是黑色&lt;/p>\n    &lt;h1>我是蓝色&lt;/h2>\n    &lt;h2>我是蓝色&lt;/h2>\n    &lt;h3>我是蓝色&lt;/h3>\n    &lt;h4>我是蓝色&lt;/h4>\n    &lt;h5>我是蓝色&lt;/h5>\n&lt;/div></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//style\n\ndiv:not(p):not(span){\n  color: blue;\n}\n\n或者\n\ndiv:not(p,span){\n  color: blue;\n}\n//此写法兼容性不太好</code></pre></div>\n<p>​</p>\n<h5>:is 伪类选择器</h5>\n<p>matches 是 is 的前世，但是本质上确实一个东西，用法完全一样\n​</p>\n<p>案例：实现让 header 与 main 标签下的 p 标签鼠标移入时字体变色</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//html\n\n&lt;header>\n  &lt;ul>\n    &lt;li>&lt;p>鼠标放上去变蓝色&lt;/p>&lt;/li>\n    &lt;li>&lt;p>鼠标放上去变蓝色&lt;/p>&lt;/li>\n  &lt;/ul>\n  &lt;p>正常字体&lt;/p>\n&lt;/header>\n\n&lt;main>\n  &lt;ul>\n    &lt;li>&lt;p>鼠标放上去变蓝色&lt;/p>&lt;/li>\n    &lt;li>&lt;p>鼠标放上去变蓝色&lt;/p>&lt;/li>\n    &lt;p>正常字体&lt;/p>\n  &lt;/ul>\n&lt;/main></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//style\n\n一般写法：\nheader ul p:hover,main ul p:hover{\n  color: blue;\n}\n\n简写：\n:is(header, main) ul p:hover{\n  color: blue;\n}</code></pre></div>\n<h4>3、状态伪类</h4>\n<ul>\n<li>:target：当前锚点的元素；</li>\n<li>:link：未访问的链接元素；</li>\n<li>:visited：已访问的链接元素；</li>\n<li>:focus：输入聚焦的表单元素；</li>\n<li>:required：输入必填的表单元素；</li>\n<li>:valid：输入合法的表单元素；</li>\n<li>:invalid：输入非法的表单元素；</li>\n<li>:in-range：输入范围以内的表单元素；</li>\n<li>:out-of-range：输入范围以外的表单元素；</li>\n<li>:checked：选项选中的表单元素；</li>\n<li>:optional：选项可选的表单元素；</li>\n<li>:enabled：事件启用的表单元素；</li>\n<li>:disabled：事件禁用的表单元素；</li>\n<li>:read-only：只读的表单元素；</li>\n<li>:read-write：可读可写的表单元素；</li>\n<li>:blank：输入为空的表单元素；</li>\n<li>:current()：浏览中的元素；</li>\n<li>:past()：已浏览的元素；</li>\n<li>:future()：未浏览的元素；</li>\n</ul>\n<p>：target\n例：当点击 a 链接，h2 个人生活会变为红色</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;a href=\"#live\">个人生活&lt;/a>\n&lt;h2 id=\"live\">个人生活&lt;/h2>\n\n//style\n:target {\n  color:red;\n}</code></pre></div>\n<h4></h4>\n<h4>4、结构伪类</h4>\n<ul>\n<li>:root：文档的根元素；</li>\n<li>:empty：无子元素的元素；</li>\n<li>:first-letter：元素的首字母；</li>\n<li>:first-line：元素的首行；</li>\n<li>:nth-child(n)：元素中指定顺序索引的元素；</li>\n<li>:nth-last-child(n)：元素中指定逆序索引的元素；；</li>\n<li>:first-child ：元素中为首的元素；</li>\n<li>:last-child ：元素中为尾的元素；</li>\n<li>:only-child：父元素仅有该元素的元素；</li>\n<li>:nth-of-type(n) ：标签中指定顺序索引的标签；</li>\n<li>:nth-last-of-type(n)：标签中指定逆序索引的标签；</li>\n<li>:first-of-type ：标签中为首的标签；</li>\n<li>:last-of-type：标签中为尾标签；</li>\n<li>:only-of-type：父元素仅有该标签的标签；</li>\n</ul>\n<p><strong>​</strong></p>\n<h3></h3>\n<h4>4.1 结构伪类选择器一</h4>\n<p>特点：不会过滤其他元素\n​</p>\n<p>:first-child 获取第一个子元素\n:last-child 获取最后一个子元素\n:nth-child(n) 选取某个元素的一个或者多个特定的子元素\n可以使用数字（n 从 1 开始）、关键字 even 偶数\\odd 奇数\n或公式&#x3C;2n-1>(n 从 0 开始，当表达式小于等于 0，将不代表任何子元素)\n:nth-last-child(n) 从最后一个开始\n​</p>\n<h4>4.2 结构伪类选择器二</h4>\n<p>特点：会过滤其他标签\n​</p>\n<p>:first-of-type 选择第一个子元素\n:last-of-type 选择最后一个子元素\n:nth-of-type() 只计算父元素中指定的某种类型的子元素\n:nth-last-of-type()\n:only-child 匹配没有任何兄弟元素的元素\n:only-of-type 代表了任意一个元素，这个元素没有其他相同类型的兄弟元素\n:empty 现在的元素里面没有任何的内容或子节点 （注意：注释和换行也会被解析成内容，注释代表一个标签）\nroot: 匹配文档根节点\n​</p>\n<h3>1.6 交集选择器</h3>\n<p>例如：div.box1 .box1.content\n由两个选择器构成，其中第一个为标签选择器，第二个为类选择器或 id 选择器，标签选择器写在前面\n两个选择器之间不能有空格\n​</p>\n<h3>1.7 并集选择器</h3>\n<p>并集选择器由逗号来连接各个选择器\n例如：p,.mydiv,#myh1\n书写规则：一行一个标签\n​</p>\n<h3>1.8 后代选择器</h3>\n<p>例如：.box1 span//指 box1 中所有的 span 后代\n.box1 span span//指 box1 中 span 内的所有 span 后代\n<strong>注意：子代与后代的区别</strong>\n<strong>​</strong></p>\n<h3>1.9 子代选择器</h3>\n<p>例如：div>span\n父亲与儿子的关系，不包括孙子\n​</p>\n<h3>1.10 兄弟选择器</h3>\n<ol>\n<li>用+表示兄弟，只能选中他下面相邻的第一个兄弟</li>\n<li>用~表示兄弟，只能选中他下面所有兄弟</li>\n</ol>\n<p>​</p>\n<h3>1.11 属性选择器</h3>\n<p>表示选取标签带有某些特殊属性的选择器\n例如：\np[tittle=“abc”] //表示选中 p 标签并且有属性 tittle=“abc”\ninput[name]//含 name 属性名\np[tittle*=“ab”]//属性值含 ab\np[tittle^=“ab”]//属性值以 ab 开头\np[tittle$=“ab”]//属性值以 ab 结尾\n[tittle*=“ab”]//不一定要加标签\n​</p>\n<h3>1.12 伪选择器</h3>\n<p>例如：\np::first-letter//文本第一个单词或文字\np::first-line//文本第一行\np::selection//大部分浏览器只有 color 与 backgroundcolor 才有用，当选中时改变文本的样式\n​</p>\n<p>p::before p::after 要与 content:连用\n通过 content 向::before 与::after 所选中的位置添加内容\n例如：在 p 标签的内部内容之前添加文字</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">p::before{\ncontent：\"我会出现在文字之前\"\n}</code></pre></div>\n<p>​</p>\n<p>::-webkit-input-placeholder -webkit 处理谷歌兼容问题\n​</p>\n<h3>1.13 优先级</h3>\n<p><strong>！important >行内样式>id 选择器>类选择器>标签>继承>通配符>浏览器默认样式</strong>\n<strong>​</strong></p>\n<p><strong>权重计算:</strong>\n（1）<strong>内联样式，如: style=””，权值为 1，0，0，0。</strong>\n（2）<strong>ID 选择器，如：#content，权值为 0，1，0，0。</strong>\n（3）<strong>类，伪类和属性选择器，如.content E:link E[attr]，权值为 0，0，1，0。</strong>\n（4）<strong>元素选择器和伪元素选择器，如 div p ::before，权值为 0，0，0，1。</strong>\n（5）<strong>通配符、子选择器、相邻选择器等的。如*、>、+,权值为 0，0，0，0。</strong>\n（6）<strong>继承的样式没有权值。!important 的权重最高</strong>\n<strong>​</strong></p>\n<p><strong>特别地：当选中元素不在同一级时，不以权重计算，以就近原则</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//style\n.box1{\ncolor：black\n}\n\n#textStyle{\ncolor：red\n}\n\n//html\n&lt;div id=\"textStyle\">\n   &lt;p class=\"box1\">\n       &lt;span>文字是什么颜色？&lt;/span>\n   &lt;/p>\n&lt;/div></code></pre></div>\n<p>​</p>\n<p>学习目的：做到给你一个页面你能随便更改他的样式\n​</p>\n<p>练习任务：</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 更改 antd tabs 样式</li>\n</ul>\n<h2>二、盒模型</h2>\n<h3>2.1 盒模型分类</h3>\n<p>设置盒子模型 box-sizing :border-box 、content-box\n**标准盒子模型：**设置的宽度 =content\n<strong>ie 盒子模型</strong>：设置宽度=content+ padding + border</p>\n<h3>2.2 思考？</h3>\n<h4>1、何种情况使用 padding，margin，broder，外边框等？</h4>\n<p>场景：布局时最外层盒子一般会有 padding，避免内容贴边。\n​</p>\n<h4>2、margin-top 重叠是什么意思</h4>\n<p><strong>边界重叠</strong>是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界。\n​</p>\n<p><strong>产生情况例如：</strong>\n1、并列关系时：垂直方向的外边距相邻的话就会发生重叠，此时外边距会采用最大的值而不是求和\n2、嵌套关系:如果父子元素的外边距相邻的话，给子元素设置外边距，则相当于给父元素设置\n​</p>\n<p><strong>外边距重叠的意义：</strong>\n<strong>外边距的重叠只产生在普通流文档的上下外边距之间</strong>，这个看起来有点奇怪的规则，其实有其现实意义。设想，当我们上下排列一系列规则的块级元素（如段落 P）时，那么块元素之间因为外边距重叠的存在，段落之间就不会产生双倍的距离。\n​</p>\n<p><strong>防止外边距重叠解决方案：</strong> 1.外层元素 padding 代替 2.内层元素透明边框 border:1px solid transparent; 3.内层元素绝对定位 postion:absolute: 4.外层元素 overflow:hidden; 5.内层元素 加 float:left;或 display:inline-block; 6.内层元素 padding:1px;\n​</p>\n<h4>3、 margin 为负数是什么效果</h4>\n<p>margin-top：-50px----相对相邻元素向上移动 50px\nmargin-bottom：-50px----下面的元素会向上移动 50px，重叠在改元素上方\nmargin-left：-50px----相对相邻元素向左移动 50px\nmargin-right：-50px----下面的元素会向左移动 50px，重叠在改元素上方\n​</p>\n<p>如图：当上面一个盒子 margin-tottom 为负数时，下面的盒子会向上重叠，减少 css 读取的值\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1642129371559-a67b62c6-ea63-4717-9e8f-12bcb0728bfd.png#clientId=ua166d848-1f9d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=208&#x26;id=u5712536b&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=208&#x26;originWidth=389&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=2112&#x26;status=done&#x26;style=none&#x26;taskId=u33f89f9c-dc4c-4f73-9eda-c38b3821046&#x26;title=&#x26;width=389\" alt=\"image.png\">\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1642129389655-6ee56491-0950-4909-ab9a-42d3f9bfcf60.png#clientId=ua166d848-1f9d-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=291&#x26;id=u40fcd860&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=291&#x26;originWidth=488&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=68823&#x26;status=done&#x26;style=none&#x26;taskId=uf0122f81-a826-46fa-92b1-840031b6827&#x26;title=&#x26;width=488\" alt=\"image.png\">\n​</p>\n<p>2.4 练习</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 实现<a href=\"https://app.mockplus.cn/app/aDx-3lS4jfA/develop/design/nuZBXcVzahgyE\">https://app.mockplus.cn/app/aDx-3lS4jfA/develop/design/nuZBXcVzahgyE</a></li>\n</ul>\n<p>​</p>\n<h2>三、背景相关</h2>\n<p>背景图片，大小，多张背景，背景定位、等，\n​</p>\n<h4>3.1 案例：如何设置元素透明，而不让上面的文字透明</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">情形1：当背景为纯色的时，直接使用rgba实现\n.opacityBg {\n  width: 200px;\n  height: 200px;\n  background-color: rgba(255, 0, 0, 0.5);\n}\n\n\n情形2：当背景为图片时需要用opacity属性实现\n.opacityBgImg {\n  width: 200px;\n  height: 200px;\n  position: relative;\n  .wordBox {\n    width: 100%;\n    height: 100%;\n    background: url(./img//1.jpg) no-repeat;\n    background-size: contain;\n    opacity: 0.5;\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: -1;\n  }\n  p {\n    position: relative;\n    z-index: 10;\n  }\n}\n</code></pre></div>\n<p>​</p>\n<h4>3.2 background-color 背景颜色的设置方法</h4>\n<p>英文、十六进制、rgb、rgba（多一个透明度）\n​</p>\n<h4>3.3 background-image 背景图片</h4>\n<p>需要给 div 设置宽高</p>\n<h4>3.4 background-repeat 平铺效果</h4>\n<p>属性：\nno-repeat（不重复）、repeat（重复，默认值）、repeat-x（x 轴重复）、repeat-y（y 轴重复）</p>\n<h4>3.5 background-position</h4>\n<p>x y 背景图片位置 left right top bottom center，\n例如：background-position:left bottom\nbackground-position：100px 100px 填确切的值\nbackground-position：%50 百分比：父元素除去背景图所占宽高的百分比\n​</p>\n<h4>3.5 background-size：w h</h4>\n<p>background-size：确切的值\nbackground-size：百分比：父元素宽高的百分比\nbackground-size：cover 保证图片覆盖完 div\nbackground-size：contain 保证图片显示完全\n​</p>\n<h4>3.6 背景附着 background-attachment：flexd scroll</h4>\n<p>​</p>\n<h4>3.7 多背景</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  background: url(./img/button_1_11.png) left top no-repeat,\n      url(./img/button_1_13.png) right top no-repeat;</code></pre></div>\n<h4></h4>\n<h4>3.8 背景渐变</h4>\n<p><strong>1、线性渐变：background：linear-gradient（）</strong>\n<strong>​</strong></p>\n<p>可控制渐变方向：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">background：linear-gradient（to right，red，green，blue）/（to right bottom，red，green，blue）</code></pre></div>\n<p>颜色渐变控制用百分比控制：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">background：linear-gradient（to right，red 33%，green 66%，blue 100%）</code></pre></div>\n<p>特别地：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> background: linear-gradient(to right, blue 33%, #fff 33%, #fff 66%, red 66%);\n //无渐变</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">div {\n•           width: 400px;\n•           height: 200px;\n•           background: linear-gradient(to right, red 33%, green 33%, green 66%, blue 66%);\n•       }</code></pre></div>\n<p>**注意理解：**相邻两个元素的百分比的差值就是这两个颜色过渡所占的面积比\n​</p>\n<p><strong>2、径向渐变：background：radial-gradient（red，green，blue）</strong>\n<strong>​</strong></p>\n<p>练习</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 实现按钮<img src=\"https://cdn.nlark.com/yuque/0/2021/png/685932/1640567939586-c57e63d7-60f3-487c-99dc-6c32973dab8c.png#clientId=ua67f9cbc-d22c-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=110&#x26;id=u5e38f8bd&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=110&#x26;originWidth=663&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=42809&#x26;status=done&#x26;style=none&#x26;taskId=ub1323f9b-262b-4fe3-9447-ba811c81dd8&#x26;title=&#x26;width=663\" alt=\"image.png\"></li>\n</ul>\n<p>素材在这里<a href=\"https://app.mockplus.cn/app/wPfnf8BJgdTm/develop/design/WP8tSoKix1Zv\">https://app.mockplus.cn/app/wPfnf8BJgdTm/develop/design/WP8tSoKix1Zv</a>\n​</p>\n<h2>四、颜色</h2>\n<p>各种颜色的设置、分别什么时候，大部分就是十六进制</p>\n<h3>4.1 英文单词表示颜色</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">color：red\n\n 缺点：颜色有成千上万种，不是每种颜色都有对应的英文单词，使用上会有局限性。</code></pre></div>\n<h3>4.2 十六进制表示颜色</h3>\n<p>十六进制颜色的组成部分是：＃RRGGBB，其中 RR（红色），GG（绿色）和 BB（蓝色），所有值都必须介于 0 和 FF 之间。通俗来讲，十六进制的实质就是 rgb，每两位表示一个颜色。当每两位的值一样的时候可以缩写。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">color：#ffcc00\n可以简写成\ncolor：#fc0\n\n优点：所有主要浏览器都支持十六进制颜色值，推荐使用。</code></pre></div>\n<h3>4.3 RGB 与 RGBA 表示颜色</h3>\n<p>RGB 中，R 表示 red 红色，G 表示 green 绿色，B 表示 blue 蓝色。</p>\n<p>RGB 写法：rgb（0,0,0）。它的取值范围都在 0-255 之间，值越大越颜色越深。RGB 除了可以用数值以外，它还可以用百分百，取值在 0%到 100%之间。比如：RGB（0,0,255）和 RGB（0％，0％，100％）表示的是同一种颜色。\n​</p>\n<p>RGBA 表示法。它是 RGB 表示法的升级版,新添了透明属性。前三个属性值和 RGB 表示法相同，第四个属性值的值域为 0——1 可以精确到小数点后两位。\n​</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">红色：rgb(255,0,0)；\n白色：rgb(255,255,255)；\n黑色：rgb(0,0,0)\n\ncolor:rgba(0,0,0,0.5);\n\n优点：所有主要浏览器都支持RGB颜色值。</code></pre></div>\n<p>​</p>\n<h3>4.4 HSL 表示颜色</h3>\n<p>HSL 颜色值分别代表：色相，饱和度，亮度。</p>\n<p>色相是在色轮上的程度（从 0 到 360）-0（或 360）是红色的，120 是绿色的，240 是蓝色的。饱和度是一个百分比值，0％意味着灰色和 100％的阴影，是全彩。亮度也是一个百分比，0％是黑色的，100％是白色的。\n​</p>\n<p>HSLA 表示法。是 HSL 表示法的加强版，增加了透明度的属性值，值域为０-１。\n​</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">color:hsl(0，100%，100%);\n\ncolor:hsla(0,100%,100%,0.5);\n\n 注意：IE9,Firefox,Chrome,Safari,和Opera10+.支持HSL颜色值。</code></pre></div>\n<p>​</p>\n<h2>五、弹性布局</h2>\n<p><a href=\"https://juejin.cn/post/7033420158685151262?share_token=37a71672-c98b-4300-b32c-a2a0b772c9a4\">https://juejin.cn/post/7033420158685151262?share_token=37a71672-c98b-4300-b32c-a2a0b772c9a4</a></p>\n<h3>5.1 容器属性六大属性</h3>\n<h4>1、flex-direction 属性决定主轴的方向（即项目的排列方向）。</h4>\n<ol>\n<li>row（默认值）： 主轴为水平方向，起点在左端；</li>\n<li>row-reverse： 主轴在水平方向，起点在右端 ；</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ol>\n<p>​</p>\n<p>​</p>\n<h4>2、flex-wrap 属性定义（定义是否换行）</h4>\n<ol>\n<li>nowrap（默认）：不换行。当容器宽度不够时，每个项目会被挤压宽度；</li>\n<li>wrap： 换行，并且第一行在容器最上方；</li>\n<li>wrap-reverse： 换行，并且第一行在容器最下方。</li>\n</ol>\n<p>注：（flex-flow 是 flex-direction 和 flex-wrap 的缩写形式，默认值为：flex-flow: row wrap;）\n​</p>\n<p>​</p>\n<h4>3、justify-content 属性定义了项目在主轴上的对齐方式。</h4>\n<ol>\n<li>flex-start（默认值）： 项目位于主轴起点。</li>\n<li>flex-end：项目位于主轴终点。</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。(开头和最后的项目，与父容器边缘没有间隔)</li>\n<li>space-around：每个项目两侧的间隔相等。但是项目之间的间隔比项目与边框的间隔大一倍。(开头和最后的项目，与父容器边缘有一定的间隔)</li>\n<li>space-evenly：每个项目两侧的间隔相等。所以，项目之间的间隔和项目与边框的间隔相同。</li>\n</ol>\n<p>​</p>\n<p>​</p>\n<p>​</p>\n<h4>4、align-items 属性定义项目在交叉轴上如何对齐；</h4>\n<ol>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。(文字的行高、字体大小会影响每行的基线)</li>\n<li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li>\n</ol>\n<p>​</p>\n<p>​</p>\n<h4>5、align-content 属性定义了多根轴线的对齐方式。</h4>\n<p>该属性定义了当有多根主轴时，即 item 不止一行时，多行在交叉轴轴上的对齐方式。注意当有多行时，定义了 align-content 后，align-items 属性将失效。align-content 可能值含义如下（假设主轴为水平方向）：</p>\n<ol>\n<li>flex-start：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center：居中对齐</li>\n<li>space- between：两端对齐</li>\n<li>space-around：沿轴线均匀分布</li>\n<li>stretch：各行将根据其 flex-grow 值伸展以充分占据剩余空间</li>\n</ol>\n<p>​</p>\n<h4>6、flex-flow:row wrap 缩写形式</h4>\n<p>​</p>\n<ol>\n<li>felx-flow 是 flex-direction || flex-wrap 的缩写，这个属性很灵活，你可以只写一个属性，也可以两个都写，甚至交换前后顺序都是可以的，如：row wrap|column wrap-reverse 等。默认值为 row nowrap，即横向排列不换行。</li>\n<li>flex-flow：column wrap === flex-direction：column；flex-wrap：wrap</li>\n<li>如果只写了一个属性值的话，那么另一个属性就直接取默认值；flex-flow：row-reverse === flex-direction：row-reverse；flex-wrap：nowrap；</li>\n</ol>\n<p>​</p>\n<h3>5.2 项目属性六大属性</h3>\n<p><a href=\"https://blog.csdn.net/I_r_o_n_M_a_n/article/details/118052279\">https://blog.csdn.net/I_r_o_n_M_a_n/article/details/118052279</a>\n​</p>\n<p>需注意使用 flex 容器内元素，即 flex item 的 float，clear、vertical-align 属性将失效\n​</p>\n<h4>1、order</h4>\n<p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &lt;div class=\"tbox\">\n        &lt;div style=\"order: 4;\">a&lt;/div>\n        &lt;div style=\"order: 3;\">b&lt;/div>\n        &lt;div style=\"order: 1;\">c&lt;/div>\n        &lt;div style=\"order: 2;\">d&lt;/div>\n &lt;/div></code></pre></div>\n<h4>2、flex-grow</h4>\n<p>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。\n​</p>\n<p>​</p>\n<h4>3、flex-shrink</h4>\n<p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。负值对该属性无效。\n​</p>\n<h4>4、flex-basis</h4>\n<p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。项目将占据固定空间。\n​</p>\n<p>取值:用于设置项目宽度，不设置 flex-basis，项目会保持默认宽度，或者 width 为自身的宽度。但如果设置了 flex-basis，权重比 width 属性高，因此会覆盖 widtn 属性。</p>\n<h4>5、flex</h4>\n<p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> flex: none | [ &lt;'flex-grow'> &lt;'flex-shrink'>? || &lt;'flex-basis'> ]</code></pre></div>\n<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n​</p>\n<h4>6、align-self</h4>\n<p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</code></pre></div>\n<p>​</p>\n<p>​</p>\n<h2>六、css 的各种单位</h2>\n<p>包括但不限于 px、rem、em、vw、vh、百分比，顺便掌握 calc 计算\n​</p>\n<h3>6.1 css 各单位</h3>\n<p>绝对单位：px、in、pt、mm、cm\n相对单位：%、em、vm、vh、rem\n​</p>\n<p><strong>相对单位描述：</strong></p>\n<table>\n<thead>\n<tr>\n<th>em</th>\n<th>相对于元素的字体大小（font-size）（2em 表示当前字体大小的 2 倍）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rem</td>\n<td>相对于根元素的字体大小（font-size）</td>\n</tr>\n<tr>\n<td>vw</td>\n<td>相对于视口*宽度的 1%</td>\n</tr>\n<tr>\n<td>vh</td>\n<td>相对于视口*高度的 1%</td>\n</tr>\n<tr>\n<td>vmin</td>\n<td>相对于视口*较小尺寸的 1％</td>\n</tr>\n<tr>\n<td>vmax</td>\n<td>相对于视口*较大尺寸的 1％</td>\n</tr>\n<tr>\n<td>%</td>\n<td>相对于父元素</td>\n</tr>\n</tbody>\n</table>\n<p><strong>px:</strong>\n像素（px）是相对于观看设备的。对于低 dpi 的设备，1px 是显示器的一个设备像素（点）。对于打印机和高分辨率屏幕，1px 表示多个设备像素。\n​</p>\n<p><strong>vm 和 vh：</strong>\n在 PC 端，<strong>视口</strong>指的是在 PC 端，指的是浏览器的可视区域；\nvm 和 vh 的大小是相对于视口的宽度和高度。\nvm: 1vm 等于视口宽度的 1%。\nvh: 1vh 等于视口高度的 1%。\n​</p>\n<p>​</p>\n<h3>6.2 calc()的运算法则</h3>\n<p>1）、使用 ”+”、”-”、”<em>” 和 ”/” 运算\n2）、可以使用百分比、px、em、rem 等单位运算\n3）、可以混合使用各种单位进行运算\n4）、表达式中有 ”+” 和 ”-” 时，其前后必须有空格。\n5）、表达式中有 ”</em>” 和 ”/” 时，其前后可以没有空格，但建议保留\n​</p>\n<p>** calc()应用：**\n如果元素的宽度为 100%时，其自身不带其它盒模型属性设置还好，如果有别的类似 margin、padding 或 border 的属性设置，那将导致盒子被撑破。为了解决撑破容器的问题，以前我们只能计算 div.box 的宽度，用容器的宽度减去 padding 和 border 的值 ，但有时候我们苦于不知道元素的总宽度，比如说是自适应布局，只知道一个百分比值，但其它的值又是*px 之类的值，这就比较难解决了。随着 css3 的出现，其中利用 box-sizing 来改变元素的盒模型以达到最终想要的效果，但是 calc()解决此问题更加方便。</p>\n<h2>七、定位</h2>\n<p>z-index 相对定位，绝对定位，固定定位，还有自己了解\n​</p>\n<h3>7.1 定位</h3>\n<p>相对定位、绝对定位、固定定位，通过设置 position 属性开启定位</p>\n<ul>\n<li>static:默认值没有开启定位</li>\n<li>relative:开启相对定位</li>\n<li>absolute:开启绝对定位</li>\n<li>fixed:开启固定定位</li>\n</ul>\n<p>​</p>\n<h3>7.2 相对定位</h3>\n<p><strong>特点：</strong>\n1、开启了相对定位的元素在没有设置偏移量之前不会移动\n2、相对于原来自己所在的位置进行定位\n3、开启相对定位不会脱离文档流\n4、开启相对定位的元素会提升一个层级\n​</p>\n<p>left right top bottom</p>\n<h3>7.3 绝对定位</h3>\n<p><strong>特点：</strong>\n1、开启绝对点位的元素在使用偏移量之前不会移动\n2、开启绝对定位的元素脱离了文档流\n3、相对于它最近的有定位（相对定位、绝对定位、固定定位）的祖先元素左上角来进行定位，如果没有找到则是相对于屏幕的左上角进行定位\n​</p>\n<p><strong>案例：采用绝对定位完美居中</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">position：absolute；\ntop：50%；\nmargin-top：-自身高度一半；\nleft：50%；\nmargin-left：-自身宽度一半；</code></pre></div>\n<p>​</p>\n<h3>7.4 固定定位</h3>\n<p><strong>特点：</strong>\n1、开启固定定位的元素在使用偏移量之前不会移动\n2、开启固定定位的元素脱离了文档流\n3、相对于屏幕的左上角进行定位\n4、固定在屏幕上不会随着滚动条的滚动而滚动</p>\n<p>​</p>\n<p><strong>父子元素的定位关系</strong>\n父相子相\n父相子绝（相对于父相子相更好，当多个儿子时，所有儿子都相对父亲定位更好控制）\n父绝子绝、父绝子相都不常用，绝对定位会脱离文档流</p>\n<p><strong>层级</strong>\n没有定位的元素不能使用层级\nz-index：数值越大层级越高\n注意：父元素层级高，也不能盖住子元素\n​</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 异型网页的制作</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 带子导航的 nav 制作</li>\n</ul>\n<p>​</p>\n<p>​</p>\n<h2>八、元素居中的 n 种方法（水平，垂直）</h2>\n<p>每种元素居中至少掌握两种居中，因为有事情况很多需要不同的居中方法\n块元素、行内元素，定位的元素\n​</p>\n<h3>8.1 水平居中</h3>\n<p>行内元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">text-align:center;</code></pre></div>\n<p>确定宽的块级元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1、\nmargin:0 auto;\n\n\n2、相对父元素左偏移父元素宽度一半，再通过margin偏移自身宽度一半\n.son {\n    position: absolute;\n    width: 宽度;\n    left: 50%;\n    margin-left: -0.5*宽度\n}\n\n3、\n.son {\n    position: absolute;\n    width: 宽度;\n    left: calc(50% - 0.5*宽度)\n}\n</code></pre></div>\n<p>不确定宽的块级元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1、弹性盒子\n.parent {\n    display: flex;\n    justify-content: center;\n}\n\n2、grid布局\n\n.parent {\n        display: grid;\n      }\n.child {\n        justify-self: center;\n        align-self: center;\n      }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2、绝对定位\n相对父元素左偏移父元素宽度一半，再右平移自身宽度一半\n.son {\n    position: absolute;\n    left: 50%;\n    transform: translate(-50%, 0);\n}\n</code></pre></div>\n<h3>8.2 垂直居中</h3>\n<p>行内元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">单行文本\n\n.parent {\n    height: 高度;\n}\n\n.son {\n    line-height: 高度;\n}</code></pre></div>\n<p>块级元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1、绝对定位\n（1）\n.son {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    margin: auto 0;\n}\n\n（2）\n.son {\n    position: absolute;\n    top: 50%;\n    transform: translate( 0, -50%);\n}\n\n（3）\n.son {\n    position: absolute;\n    top: 50%;\n    height: 高度;\n    margin-top: -0.5高度;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2、弹性盒子\n.parent {\n    display: flex;\n    align-items: center;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3、margin实现\n\n .father {\n        width: 200px;\n        height: 200px;\n        background-color: aquamarine;\n        overflow: hidden;\n      }\n      .son {\n        width: 50px;\n        height: 50px;\n        display: inline-block;\n        background-color: antiquewhite;\n        margin: 75px 0;\n      }</code></pre></div>\n<p>​</p>\n<h2>九、块级格式化上下文，BFC</h2>\n<h4>9.1 概念</h4>\n<p>块格式化上下文，它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局，并且与这个区域外部毫不相干。\n​</p>\n<h4>9.2 BFC 渲染规则</h4>\n<ul>\n<li>内部的盒子会在垂直方向，一个接一个地放置；</li>\n<li>盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠；</li>\n<li>每个元素的 margin 的左边，与包含块 border 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此；</li>\n<li>BFC 的区域不会与 float 盒子重叠；</li>\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n<li>计算 BFC 的高度时，浮动元素也参与计算。</li>\n</ul>\n<h4>9.3 如何创建 BFC？</h4>\n<ul>\n<li>根元素：html</li>\n<li>非溢出的可见元素：overflow 不为 visible</li>\n<li>设置浮动：float 属性不为 none</li>\n<li>设置定位：position 为 absolute 或 fixed</li>\n<li>定义成块级的非块级元素：display: inline-block/table-cell/table-caption/flex/inline-flex/grid/inline-grid</li>\n</ul>\n<p>​</p>\n<h4>9.4 BFC 应用场景</h4>\n<p><strong>​</strong></p>\n<p>1、 自适应两栏布局\n​</p>\n<p>应用原理：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.aside {\n    float: left;\n    width: 100px;\n}\n.main {\n    &lt;!-- 触发 BFC -->\n    overflow: auto;\n}\n\n\n\n&lt;div class=\"layout\">\n    &lt;div class=\"aside\">aside&lt;/div>\n    &lt;div class=\"main\">main&lt;/div>\n&lt;/div></code></pre></div>\n<p>2、清除内部浮动，解决高度塌陷问题\n​</p>\n<p>浮动造成的问题就是父元素高度坍塌，所以清除浮动需要解决的问题就是让父元素的高度恢复正常。而用 BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。</p>\n<p>3、 防止垂直 margin 合并问题\n​</p>\n<p>BFC 渲染原理之一：同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。那如何让 2 个相邻的兄弟元素不在同一个 BFC 中呢？可以给其中一个元素外面包裹一层，然后触发其包裹层的 BFC，这样一来 2 个元素就不会在同一个 BFC 中了。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.demo3 .a,\n.demo3 .b {\n    border: 1px solid #999;\n    margin: 10px;\n}\n.contain-b {\n    overflow: hidden;\n}\n\n\n&lt;div class=\"layout\">\n    &lt;div class=\"a\">a&lt;/div>\n    &lt;div class=\"contain-b\">\n        &lt;div class=\"b\">b&lt;/div>\n    &lt;/div>\n&lt;/div>\n</code></pre></div>\n<p>​</p>\n<p>​</p>\n<h2>十、响应式、自适应、媒体查询、百分比、熟练使用栅格</h2>\n<p>​</p>\n<h3>10.1 响应式与自适应</h3>\n<h4>响应式</h4>\n<p><strong>1、概念</strong>：一个网站能够兼容多个终端一而不是为每个终端做一个特定的版本，这个概念是为解决移动互联网浏览而诞生的。\n**2、设计特点：**通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展示不同的布局和内容；\n<strong>响应式</strong>一套页面全部适配 （可以想象：<strong>响应式设计要考虑的内容要比自适应设计复杂的多</strong>）\n<strong>3、优点：</strong></p>\n<ul>\n<li>面对不同分辨率设备灵活性强</li>\n<li>能够快捷解决多设备显示适应问题</li>\n</ul>\n<p><strong>4、缺点：</strong></p>\n<ul>\n<li>仅适用布局、信息、框架并不复杂的部门类型网站</li>\n<li>兼容各种设备工作量大，效率低下</li>\n<li>代码累赘，会出现隐藏无用的元素，加载时间加长</li>\n</ul>\n<p><strong>5、响应式页面的实现：</strong>\n常见的实现响应式有两种方法\n一种是利用<strong>媒体查询</strong>，另外一种是<strong>栅格布局</strong>\n<strong>​</strong></p>\n<p>​</p>\n<h4>自适应</h4>\n<p><strong>1、概念：<strong>自适应设计是能使网页自适应显示在不同大小终端设备上新网页设计方式及技术。<strong>需要开发多套界面；响应式开发一套界面。</strong>\n<strong>2、设计特点：</strong> 对页面做的屏幕设配有一定范围：比如</strong>pc 端（>1024）</strong> 一套适配，**平板（768-1024）**一套适配，**手机端（&#x3C;768）**一套适配；\n<strong>3、优点：</strong></p>\n<ul>\n<li>对网站的复杂程度兼容性更大</li>\n<li>实施起来代价更低</li>\n<li>代码更高效</li>\n<li>测试更容易，运营相对更精准（图片可控性更高）</li>\n</ul>\n<p><strong>4、缺点：</strong></p>\n<ul>\n<li>在移动端设计大行其道之下，同一个网站，往往需要更为不同的设备开发不同的页面，增加开发成本</li>\n<li>当需求改变时，可能会改动多套代码。</li>\n</ul>\n<h3>10.2 媒体查询</h3>\n<p>媒体查询可以针对不同的屏幕尺寸设置不同的样式，特别是如果你需要设计响应式的页面\n​</p>\n<p>媒体查询支持逻辑操作符：</p>\n<ul>\n<li>and：查询条件都满足的时候才生效；</li>\n<li>not：查询条件取反；</li>\n<li>only：整个查询匹配的时候才生效，常用语兼容旧浏览器，使用时候必须指定媒体类型；</li>\n<li>逗号或者 or：查询条件满足一项即可匹配；</li>\n</ul>\n<p>​</p>\n<p>实例代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">如果页面宽度大于 300 像素并且小于600像素，则修改body的背景颜色为绿色:\n\n@media screen and (min-width: 300px) and (max-width:600px) {\n    body {\n         background-color:green;\n    }\n}</code></pre></div>\n<p><strong>使用@media 的三种方法</strong>\n<strong>1.直接在 CSS 文件中使用：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@media 类型 and (条件1) and (条件二){\n    css样式\n}\n@media screen and (max-width:1024px) {\n    body{\n        background-color: red;\n    }\n}</code></pre></div>\n<p><strong>2.使用@import 导入</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@import url(\"css/moxie.css\") all and (max-width:980px);</code></pre></div>\n<p><strong>3.也是最常用的方法—直接使用 link 连接，media 属性用于设置查询方法</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/moxie.css\" media=“all and (max-width=980px)”/></code></pre></div>\n<h3></h3>\n<h3>10.3 栅格布局</h3>\n<p>此处以 antd 中栅格系统为例，将一行分成 24 分，设置一行中各个项目所占份数来实现响应式布局，若一行超过 24 份，则自动换行。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> &lt;Row>\n          &lt;Col xs={24} sm={24} md={8} lg={6}>\n            &lt;Form.Item\n              label=\"Username\"\n              name=\"username\"\n              rules={[\n                { required: true, message: \"Please input your username!\" },\n              ]}\n            >\n              &lt;Input />\n            &lt;/Form.Item>\n          &lt;/Col>\n &lt;/Row></code></pre></div>\n<h3>10.4 Grid 布局</h3>\n<h4>1、初始化元素为栅格化</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//html\n&lt;dl class=\"container\">\n  &lt;dd class=\"item1\">item1&lt;/dd>\n  &lt;dd class=\"item2\">item2&lt;/dd>\n  &lt;dd class=\"item3\">item3&lt;/dd>\n&lt;/dl>\n\n//style\n.container{\n  display: grid;\n}</code></pre></div>\n<h4>2、grid-template-columns 设置列数</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.container{\n  min-width: 200px;\n  display: grid;\n  grid-template-columns: 100px 100px auto;\n}\n//将区域划分为三列，第一列和第二列的宽度都为100px，第三列的宽度为自适应。</code></pre></div>\n<h4>3、grid-template-rows 设置行数</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.container{\n  min-height: 200px;\n  display: grid;\n  grid-template-rows: 60px auto;\n}\n//将区域分为两行，第一行的高度固定为60px，而第二行的高度自适应。</code></pre></div>\n<h4>4、单位 fr</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">grid-template-rows: auto 10% 2fr 1fr\n//将栅格化的区域分为4行：第一行是根据内容自适应，第二行为区域的10%，最后剩余的区域分成三部分，2fr表示占其2/3，1fr表示占其1/3。</code></pre></div>\n<h4>5、grid-column-grap 设置列间距 grid-row-gap 设置行间距</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">grid-column-gap: 10px; //类似margin-left和margin-right\n\ngrid-row-gap: 10px;//类似margin-top和margin-bottom\n\ngrid-gap: 10px 20px;//表示grid-column-grap 与  grid-row-gap 简写</code></pre></div>\n<h4>6、子元素 grid-column grid-row</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">grid-column: 1 / 3 //横跨第一列到第三列\n\n等同于\ngrid-column-start: 1;\ngrid-column-end: 3;\n\ngrid-row: 2 / 4</code></pre></div>\n<h4>7、子元素 justify-self</h4>\n<p>justify-self 更改元素宽度和排列的位置：</p>\n<ul>\n<li>stretch: 默认值，拉伸内容的宽度为预设的宽度</li>\n<li>start: 宽度为内容宽度，内容在左侧展示</li>\n<li>center: 宽度为内容宽度，内容在居中展示</li>\n<li>end: 宽度为内容宽度，内容在右侧展示</li>\n</ul>\n<h4>8、子元素 align-self</h4>\n<p>align-self 更改元素高度和排列的位置，有值如下：</p>\n<ul>\n<li>stretch: 默认值，拉伸内容的高度为预设的高度</li>\n<li>start: 宽度为内容高度，内容在上侧展示</li>\n<li>center: 宽度为内容高度，内容在居中展示</li>\n<li>end: 宽度为内容高度，内容在下侧展示</li>\n</ul>\n<h4>9、容器 justify-items align-items</h4>\n<p>justify-items ：对所有子元素内容进行水平方向的排列\nalign-items：对所有子元素内容进行垂直方向的排列</p>\n<h4>10、使用函数 repeat 简化</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.container{\n  display: grid;\n  grid-template-columns: repeat(2, 100px) 1fr 2fr;\n}</code></pre></div>\n<p>grid 布局练习：顶部高度固定，左侧宽度固定，其余自适应</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;style>\n      .outer {\n        height: 100vh;\n        background-color: pink;\n        display: grid;\n        grid-template-columns: auto;\n        grid-template-rows: 100px;\n      }\n      .inner:nth-child(odd) {\n        background-color: powderblue;\n      }\n      .inner:nth-child(even) {\n        background-color: lightcyan;\n      }\n      .innerbox {\n        display: grid;\n        grid-template-columns: 200px auto;\n      }\n      .child:nth-child(1) {\n        background-color: lightgreen;\n      }\n      .child:nth-child(2) {\n        background-color: lightskyblue;\n      }\n    &lt;/style>\n\n\n\n    &lt;div class=\"outer\">\n      &lt;div class=\"inner\">ddd&lt;/div>\n      &lt;div class=\"inner innerbox\">\n        &lt;div class=\"child\">&lt;/div>\n        &lt;div class=\"child\">&lt;/div>\n      &lt;/div>\n    &lt;/div></code></pre></div>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 用 antd 的表单加栅格完成大屏幕显示 4 格中屏幕显示三格小屏幕显示一格的需求</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 完成一套响应式布局的 header 和 footer（使用 rem 和 vw 两种方案各完成一套）</li>\n</ul>\n<p>​</p>\n<p>​</p>\n<h2>十一、移动端适配的 n 种方法</h2>\n<p>1、使用 px 单位，百分比，合理布局，结合媒体查询实现\n2、使用 rem 单位结合百分比，实现按比例缩放\n3、使用 vw 单位结合百分比，实现按比例缩放\n​</p>\n<h2>十二、less 知识的学习</h2>\n<h3>12.1 配置安装</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//安装\nyarn add --save less less-loader\n\n//安装指定版本\nnpm install less@2.7.1 -g\n\n//查看版本\nlessc -v\nlessc --version</code></pre></div>\n<h3>12.2 变量使用</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 全局变量\n@color:#CBCB41;\n\n#wordStyle{\n    font-size: 25px;\n    text-decoration: line-through;\n    //使用\n    color:@color;\n    // 局部变量\n    @font:30px;\n}</code></pre></div>\n<h3>12.3 混合（Mixins）</h3>\n<p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。假设我们定义了一个类（class）如下：\n​</p>\n<p>定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.bordered {\n   \t \tborder-top: dotted 1px black;\n\t\t\tborder-bottom: solid 2px black;\n}</code></pre></div>\n<p>使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#menu a {\n\t\tcolor: #111;\n\t\t.bordered();\n}\n\n.post a {\n\t\tcolor: red;\n\t\t.bordered();\n}\n\n.bordered 类所包含的属性就将同时出现在 #menu a 和 .post a 中了。</code></pre></div>\n<h3>12.4 嵌套（Nesting）</h3>\n<p>Less 提供了使用嵌套（nesting）代替层叠或与层叠结合使用的能力。假设我们有以下 CSS 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#header {\n  color: black;\n}\n#header .navigation {\n  font-size: 12px;\n}\n#header .logo {\n  width: 300px;\n}</code></pre></div>\n<p>用 Less 语言我们可以这样书写代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#header {\n  color: black;\n  .navigation {\n    font-size: 12px;\n  }\n  .logo {\n    width: 300px;\n  }\n}\n</code></pre></div>\n<p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p>\n<p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个经典的 clearfix 技巧，重写为一个混合（mixin） (&#x26; 表示当前选择器的父级）：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.clearfix {\n  display: block;\n  zoom: 1;\n\n  &amp;:after {\n    content: \" \";\n    display: block;\n    font-size: 0;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n  }\n}</code></pre></div>\n<h3>12.5 @规则嵌套和冒泡</h3>\n<p>@ 规则（例如 <a href=\"/media\">@media </a> 或 @supports）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.component {\nwidth: 300px;\n@media  (min-width: 768px) {\nwidth: 600px;\n@media   (min-resolution: 192dpi) {\nbackground-image: url(/img/retina2x.png);\n}\n}\n@media  (min-width: 1280px) {\nwidth: 800px;\n}\n}</code></pre></div>\n<p>编译为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.component {\nwidth: 300px;\n}\n@media  (min-width: 768px) {\n.component {\nwidth: 600px;\n}\n}\n@media  (min-width: 768px) and (min-resolution: 192dpi) {\n.component {\nbackground-image: url(/img/retina2x.png);\n}\n}\n@media  (min-width: 1280px) {\n.component {\nwidth: 800px;\n}\n}</code></pre></div>\n<h3></h3>\n<p>12.6 运算（Operations）</p>\n<p>算术运算符 +、-、*、/ 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@conversion-1: 5cm + 10mm; // 结果是 6cm\n@conversion-2: 2 - 3cm - 5mm; // 结果是 -1.5cm\n@incompatible-units: 2 + 5px - 3cm; // 结果是 4px\n@base: 5%;\n@filler: @base  * 2; // 结果是 10%\n@other: @base  + @filler; // 结果是 15%\n@base: 2cm * 3mm; // 结果是 6cm</code></pre></div>\n<p>乘法和除法不作转换。因为这两种运算在大多数情况下都没有意义，一个长度乘以一个长度就得到一个区域，而 CSS 是不支持指定区域的。Less 将按数字的原样进行操作，并将为计算结果指定明确的单位类型。</p>\n<p>你还可以对颜色进行算术运算：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@color: #224488 / 2; //结果是 #112244\nbackground-color: #112244 + #111; // 结果是 #223355</code></pre></div>\n<h3>12.7 calc() 特例</h3>\n<p>Released v3.0.0</p>\n<p>为了与 CSS 保持兼容，calc() 并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</p>\n<p>@var: 50vh/2;\nwidth: calc(50% + (<a href=\"/var\">@var </a> - 20px));  // 结果是 calc(50% + (25vh - 20px))</p>\n<h3></h3>\n<p>12.8 转义（Escaping）</p>\n<p>转义（Escaping）允许你使用任意字符串作为属性或变量值。任何 ~“anything” 或 ~‘anything’ 形式的内容都将按原样输出，除非 interpolation。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@min768: ~\"(min-width: 768px)\";\n.element {\n@media  @min768  {\nfont-size: 1.2rem;\n}\n}</code></pre></div>\n<p>编译为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@media  (min-width: 768px) {\n.element {\nfont-size: 1.2rem;\n}\n}\n注意，从 Less 3.5 开始，可以简写为：\n\n@min768: (min-width: 768px);\n.element {\n@media  @min768  {\nfont-size: 1.2rem;\n}\n}</code></pre></div>\n<h3>12.9 函数（Functions）</h3>\n<p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在 Less 函数手册中有详细介绍。</p>\n<p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@base: #f04615;\n@width: 0.5;\n\n.class {\nwidth: percentage(@width); // returns 50%\ncolor: saturate(@base, 5%);\nbackground-color: spin(lighten(@base, 25%), 8);\n}</code></pre></div>\n<h3>12.10 混合（mixins）进行分组</h3>\n<p>​</p>\n<p>有时，出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组。你可以用 Less 更直观地实现这一需求。假设你希望将一些混合（mixins）和变量置于 #bundle 之下，为了以后方便重用或分发：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#bundle() {\n  .button {\n    display: block;\n    border: 1px solid black;\n    background-color: grey;\n    &amp;:hover {\n      background-color: white;\n    }\n  }\n  .tab {\n    ...;\n  }\n  .citation {\n    ...;\n  }\n}\n</code></pre></div>\n<p>现在，如果我们希望把 .button 类混合到 #header a 中，我们可以这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#header a {\n  color: orange;\n  #bundle.button(); // 还可以书写为 #bundle > .button 形式\n}\n</code></pre></div>\n<p>注意：如果不希望它们出现在输出的 CSS 中，例如 #bundle .tab，请将 () 附加到命名空间（例如 #bundle()）后面。</p>\n<h3>12.11 映射（Maps）</h3>\n<p>从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#colors() {\n  primary: blue;\n  secondary: green;\n}\n\n.button {\n  color: #colors[primary];\n  border: 1px solid #colors[secondary];\n}\n</code></pre></div>\n<p>输出符合预期：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.button {\n\tcolor: blue;\n\tborder: 1px solid green;\n}</code></pre></div>\n<h3>12.12 作用域（Scope）</h3>\n<p>Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}</code></pre></div>\n<p>与 CSS 自定义属性一样，混合（mixin）和变量的定义不必在引用之前事先定义。因此，下面的 Less 代码示例和上面的代码示例是相同的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@var: red;\n\n#page {\n  #header {\n    color: @var; // white\n  }\n  @var: white;\n}</code></pre></div>\n<h3>12.13 注释（Comments）</h3>\n<p>块注释和行注释都可以使用：</p>\n<p>/* 一个块注释</p>\n<ul>\n<li>style comment! */\n@var: red;</li>\n</ul>\n<p>// 这一行被注释掉了！\n@var: white;</p>\n<h3></h3>\n<p>12.14 导入（Importing）</p>\n<p>“导入”的工作方式和你预期的一样。你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less 扩展名，则可以将扩展名省略掉：</p>\n<p><a href=\"/import\">@import </a> “library”; // library.less\n<a href=\"/import\">@import </a> “typo.css”;\n​</p>\n<h2>​</h2>\n<p>​</p>\n<h2>十三、css 动画 动画库</h2>\n<h3>13.1 css 动画</h3>\n<p><strong>1、animation-name(动画名称)</strong>\nanimation-name 属性是必须存在的，因为 animation-name 的值默认是 none，没有动画。\n​</p>\n<p><strong>2、animation-duration(动画执行一次所需时间)</strong>\nanimation-duration 属性也是必须存在的，因为 animation-duration 的值默认是 0，没有动画。\n​</p>\n<p><strong>3、animation-delay(动画在开始前的延迟时间)</strong>\nanimation-delay 的值可以是秒（s）或者是毫秒（ms）,默认值是 0，没有延迟。\n​</p>\n<p><strong>4、animation-timing-function(动画以何种运行轨迹完成一个周期)</strong>\nanimation-timing-function 的值是贝塞尔曲线，默认值是 ease,表示动画以低速开始，然后加速，最后在结束前变慢。 最常用的值有以下几个：\n​</p>\n<p>（1）linear:表示动画从头到尾的速度都是相同的。\n（2）ease-in:表示动画以低速开始。\n（3）ease-out:表示动画以低速结束。\n（4）ease-in-out:表示动画以低速开始和结束。\n​</p>\n<p><strong>5、animation-iteration-count(动画播放次数)</strong>\nanimation-iteration-count 属性值有两种：\n​</p>\n<p>（1）直接写数字，自定义想要播放动画的次数。\n（2）infinite：设置动画无线循环播放。\n​</p>\n<p><strong>6、animation-fill-mode(定义元素动画结束以后或者未开始的元素样式)</strong>\n​</p>\n<p>默认值为 none，标示，不会在动画结束或者未开始时给元素 添加样式\n常用属性值为：\n（1）forwards:表示动画结束后，元素直接接使用当前样式。\n（2）backwards:表示在动画延迟时间元素使用关键帧中 from 的属性值或者 to 属性值（当 animation-direction 为 reverse 或者 alternate-reverse 时）\n​</p>\n<p><strong>7、animation-direction(是否轮流反向播放动画)</strong>\n​</p>\n<p>默认值是 normal，动画正常播放。如果动画只播放一次，则该属性无效。\n常用的属性值为：\n​</p>\n<p>（1）reverse:表示动画反向播放。\n（2）alternate:表示动画在奇数次播放时为正向播放，为偶数次播放时为反向播放。\n（3）alternate-reverse: :表示动画在奇数次播放时为反向播放，为偶数次播放时为正向播放。[</p>\n<p>](<a href=\"https://blog.csdn.net/m0_48930111/article/details/108234909\">https://blog.csdn.net/m0_48930111/article/details/108234909</a>)\n示例代码：对 svg 圆的控制</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   .myCirle {\n            fill: pink;\n            animation: changeColor 2s infinite;\n        }\n\n        @keyframes changeColor {\n            0% {\n                fill: blueviolet;\n            }\n\n            50% {\n                fill: brown;\n                r: 60;\n            }\n\n            100% {\n                fill: coral\n            }\n        }</code></pre></div>\n<h3>13.2 动画库</h3>\n<p><a href=\"https://juejin.cn/post/7045872960166428685?utm_source=gold_browser_extension\">https://juejin.cn/post/7045872960166428685?utm_source=gold_browser_extension</a></p>\n<h3>1、hover.css</h3>\n<p>预览地址：<a href=\"http://ianlunn.github.io/Hover/\">http://ianlunn.github.io/Hover/</a>\n鼠标悬停动画, 支持的动画类型有:</p>\n<ul>\n<li>2D Transitions(2D 过渡)</li>\n<li>Background Transitions(背景过渡)</li>\n<li>Icons Transitions(图标过渡)</li>\n<li>Border Transitions(边框过渡)</li>\n<li>Shadow and Glow(阴影过渡)</li>\n<li>Speech Bubbles(气泡效果过渡)</li>\n<li>Curls (卷积过渡)</li>\n</ul>\n<h3>2、animate.css</h3>\n<p>预览及使用地址：<a href=\"https://www.dowebok.com/98.html\">https://www.dowebok.com/98.html</a>\n一款跨浏览器的简单便捷的 CSS 动画库, 提供了非常丰富的动画效果, 目前很多开源项目都用到了它, H5-Dooring 和 DooringX 也内置了很多它的动画效果.</p>\n<h3></h3>\n<p>3、Magic\n预览地址：<a href=\"https://www.minimamente.com/project/magic/\">https://www.minimamente.com/project/magic/</a>\n使用地址：<a href=\"https://www.wenjiangs.com/article/magic.html\">https://www.wenjiangs.com/article/magic.html</a>\n集成各种特殊动效的 css 动画库, 动画效果非常震憾, 如果大家想做一个酷炫的网站, 不妨参考使用一下这款 css 库.\n​</p>\n<h3>4、csshake</h3>\n<p>react 中使用：<a href=\"https://www.jianshu.com/p/be338566fa9b\">https://www.jianshu.com/p/be338566fa9b</a>\n能够震动和晃动 DOM 元素的 CSS 库, 在移动端模仿手机震动, QQ 窗口震动\n​</p>\n<h3>5、hint.css</h3>\n<p>演示地址：<a href=\"https://kushagra.dev/lab/hint/\">https://kushagra.dev/lab/hint/</a>\n用纯 css 和 html 实现的提示库. 体积超级小, 对于一些位置固定的提示场景\n​</p>\n<h3>6、kite</h3>\n<p>演示及使用：<a href=\"http://hiloki.github.io/kitecss/#\">http://hiloki.github.io/kitecss/#</a>\n一个兼容性极好且灵活的布局 css 库. 使用 inline-block，基于 OOCSS 和 MindBEMding, 可以帮助我们快速构建组件\n​</p>\n<p>​</p>\n<h2>十四、表格相关样式</h2>\n<p>练习案例：\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1642317159511-f9983ff1-f37b-40ba-a48c-d04e3f3f6556.png#clientId=u9be64d09-b27f-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=154&#x26;id=u202eec72&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=307&#x26;originWidth=575&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=25448&#x26;status=done&#x26;style=none&#x26;taskId=ue310718d-df8a-496d-b360-25e03c3e7b4&#x26;title=&#x26;width=287.5\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1642317243055-094d14b8-2719-4ba4-b57c-fb3926c92fd3.png#clientId=u9be64d09-b27f-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=110&#x26;id=uefc76649&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=219&#x26;originWidth=523&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=11547&#x26;status=done&#x26;style=none&#x26;taskId=u57c1d419-5b2c-42b0-9d68-9389f2cd93b&#x26;title=&#x26;width=261.5\" alt=\"image.png\">\n代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;table cellPadding={0} cellSpacing={0}>\n  //1、表格标题标签\n          &lt;caption>这里是标题&lt;/caption>\n\n  //2、表格头部标签\n          &lt;thead>\n            &lt;tr className={tabsStyle.firstTab}>\n              &lt;th>柜次&lt;/th>\n              &lt;th>品类&lt;/th>\n              &lt;th>收货方&lt;/th>\n            &lt;/tr>\n          &lt;/thead>\n\n   //3、表格内容标签\n          &lt;tbody>\n            &lt;tr>\n            //合并单元格属性\n              &lt;td rowSpan={2} colSpan={2}>张三&lt;/td>\n              &lt;td>挖掘机&lt;/td>\n            &lt;/tr>\n            &lt;tr>\n              &lt;td>大前端&lt;/td>\n            &lt;/tr>\n            &lt;tr>\n              &lt;td>张三&lt;/td>\n              &lt;td>18&lt;/td>\n              &lt;td>挖掘机&lt;/td>\n            &lt;/tr>\n            &lt;tr>\n              &lt;td>马六&lt;/td>\n              &lt;td>20&lt;/td>\n              &lt;td>大前端&lt;/td>\n            &lt;/tr>\n          &lt;/tbody>\n\n        &lt;/table></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> table {\n //设置border之间的间距，和cellSpacing效果差不多\n    border-spacing: 10px;\n\n//设置border是合并还是分离\n    border-collapse: collapse;\n    border-collapse: separate;\n\n    caption {\n//设置标题的位置在表格上方是表格下方\n      caption-side: top;\n    }</code></pre></div>\n<h2>十五、滚动条如何设置</h2>\n<p><a href=\"https://juejin.cn/post/6844904078296743943\">https://juejin.cn/post/6844904078296743943</a></p>\n<table>\n<thead>\n<tr>\n<th>滚动条伪元素</th>\n<th>作用的位置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>::-webkit-scrollbar</td>\n<td>整个滚动条</td>\n</tr>\n<tr>\n<td>::-webkit-scrollbar-button</td>\n<td>滚动条上的按钮 (上下箭头)</td>\n</tr>\n<tr>\n<td>::-webkit-scrollbar-thumb</td>\n<td>滚动条上的滚动滑块</td>\n</tr>\n<tr>\n<td>::-webkit-scrollbar-track</td>\n<td>滚动条轨道</td>\n</tr>\n<tr>\n<td>::-webkit-scrollbar-track-piece</td>\n<td>滚动条没有滑块的轨道部分</td>\n</tr>\n<tr>\n<td>::-webkit-scrollbar-corner</td>\n<td>当同时有垂直滚动条和水平滚动条时交汇的部分</td>\n</tr>\n<tr>\n<td>::-webkit-resizer</td>\n<td>某些元素的 corner 部分的部分样式(例:textarea 的可拖动按钮)</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1641549512363-bfd5954c-df7e-4471-923c-02f1f3b6ab37.png#clientId=u5cef3425-81c8-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=310&#x26;id=u085d4be7&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=310&#x26;originWidth=625&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=67220&#x26;status=done&#x26;style=none&#x26;taskId=u35f2f5b4-40ae-44e4-8f45-de15f39259a&#x26;title=&#x26;width=625\" alt=\"image.png\">\n案例代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> .detail {\n      /* 整个滚动条 */\n      &amp;::-webkit-scrollbar {\n        /* 对应纵向滚动条的宽度 */\n        width: 9px;\n        background: rgb(229, 229, 229);\n      }\n      /* 滚动条上的滚动滑块 */\n      &amp;::-webkit-scrollbar-thumb {\n        background-color: rgba(157, 157, 157, 0.4);\n        border-radius: 32px;\n      }\n      /* 滚动条轨道 */\n      &amp;::-webkit-scrollbar-track {\n        background-color: rgb(229, 229, 229);\n        border-radius: 32px;\n      }\n    }</code></pre></div>\n<h2></h2>\n<h2>十六、svg 知识了解</h2>\n<h3>16.1 svg 概念</h3>\n<p><strong>概念：</strong>\nSVG 就是一个由 XML 定义的一个文件，由于是矢量图形，所以它的图形质量非常高。每一个 SVG 文件都包含最外层的<SVg></SVg>标签。该标签用于声明 SVG 文件的开始和结束。SVG 主体中的语法和格式定义遵循 XML 标准，通过各类元素标签和标签对应的属性来描述 SVG 对象。\n​</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>SVG 意为可缩放矢量图形（Scalable Vector Graphics）。</li>\n<li>它使用 XML 格式定义图像。</li>\n<li>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失。</li>\n<li>SVG 是万维网联盟的标准。</li>\n<li>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>SVG 可被非常多的工具读取和修改（比如记事本）。</li>\n<li>SVG 与 JPEG 和 GIF 图像比起来，尺寸更小，且可压缩性更强。</li>\n<li>SVG 是可伸缩的。</li>\n<li>SVG 图像可在任何的分辨率下被高质量地打印。</li>\n<li>SVG 可在图像质量不下降的情况下被放大。</li>\n<li>SVG 图像中的文本是可选的，同时也是可搜索的（很适合制作地图）。</li>\n<li>SVG 是开放的标准。</li>\n<li>SVG 文件是纯粹的 XML。</li>\n</ul>\n<p>​</p>\n<p>​</p>\n<h3>16.2 形状元素</h3>\n<ol>\n<li><strong>矩形，<rect></strong></li>\n</ol>\n<ul>\n<li>rect 元素的 width 和 height 属性可定义矩形的高度和宽度</li>\n<li>style 属性用来定义 CSS 属性</li>\n<li>CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）</li>\n<li>CSS 的 stroke-width 属性定义矩形边框的宽度</li>\n<li>CSS 的 stroke 属性定义矩形边框的颜色</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n  &lt;rect width=\"300\" height=\"100\" style=\"fill:rgb(122,122,0);stroke-width:2;stroke:rgb(0,0,0)\" />\n&lt;/svg></code></pre></div>\n<ol start=\"2\">\n<li><strong>圆形 <circle></strong></li>\n</ol>\n<p><strong>画圆弧参考：</strong><a href=\"https://mp.weixin.qq.com/s/-4bJEa06YGLStb37N868zQ\">https://mp.weixin.qq.com/s/-4bJEa06YGLStb37N868zQ</a></p>\n<ul>\n<li><circle> 用来创建一个圆。cx 和 cy 属性定义圆中心的 x 和 y 坐标。如果忽略这两个属性，那么圆点会被设置为 (0, 0)。r 属性定义圆的半径。</li>\n<li>stroke 和 stroke-width 属性控制如何显示形状的轮廓。我们把圆的轮廓设置为 2px 宽，黑边框。</li>\n<li>fill 属性设置形状内的颜色。我们把填充颜色设置为红色。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n   &lt;circle cx=\"100\" cy=\"50\" r=\"40\" stroke=\"red\" stroke-width=\"2\" fill=\"blue\" />\n&lt;/svg></code></pre></div>\n<ol start=\"3\">\n<li><strong>椭圆，<ellipse></strong></li>\n</ol>\n<ul>\n<li>ellipse 标签可用来创建一个椭圆</li>\n<li>CX 属性定义的椭圆中心的 x 坐标</li>\n<li>CY 属性定义的椭圆中心的 y 坐标</li>\n<li>RX 属性定义的水平半径</li>\n<li>RY 属性定义的垂直半径</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"500\" height=\"500\">\n  &lt;ellipse cx=\"300\" cy=\"80\" rx=\"100\" ry=\"50\" style=\"fill:red;stroke:purple;stroke-width:2\" />\n&lt;/svg</code></pre></div>\n<ol start=\"4\">\n<li><strong>线， <line></strong></li>\n</ol>\n<ul>\n<li>line 标签可用来创建一条直线</li>\n<li>x1 属性在 x 轴定义线条的开始</li>\n<li>y1 属性在 y 轴定义线条的开始</li>\n<li>x2 属性在 x 轴定义线条的结束</li>\n<li>y2 属性在 y 轴定义线条的结束</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n  &lt;line x1=\"0\" y1=\"0\" x2=\"200\" y2=\"200\" style=\"stroke:black;stroke-width:5\" />\n&lt;/svg></code></pre></div>\n<p>​</p>\n<ol start=\"5\">\n<li><strong>折线 ，<polyline></strong></li>\n</ol>\n<ul>\n<li>polyline 是用于创建任何只有直线的形状</li>\n<li>points 是点的集合</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n  &lt;polyline points=\"20,20 40,25 60,40 80,10 120,140 200,180\" style=\"fill:none;stroke:black;stroke-width:3\" />\n&lt;/svg></code></pre></div>\n<p>示例画一个五角星：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg style=\"height:300px;width:300px;\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n    &lt;polyline points=\"100 10,40 180,190 60,10 60,160 180\" style=\"fill:blue;stroke:blue;stroke-width:1\" />\n&lt;/svg></code></pre></div>\n<ol start=\"6\">\n<li><strong>多边形<polygon></strong></li>\n</ol>\n<ul>\n<li>polygon 标签用来创建含有不少于三个边的图形</li>\n<li>points 是点的集合</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg  height=\"210\" width=\"500\">\n  &lt;polygon points=\"200,10 250,190 160,210\"\n  style=\"fill:red;stroke:purple;stroke-width:1\"/>\n&lt;/svg>\n</code></pre></div>\n<ol start=\"7\">\n<li><strong>路径，<path></strong></li>\n</ol>\n<p>路径数据：</p>\n<ul>\n<li>M = moveto</li>\n<li>L = lineto</li>\n<li>H = horizontal lineto</li>\n<li>V = vertical lineto</li>\n<li>C = curveto</li>\n<li>S = smooth curveto</li>\n<li>Q = quadratic Bézier curve</li>\n<li>T = smooth quadratic Bézier curveto</li>\n<li>A = elliptical Arc</li>\n<li>Z = closepath</li>\n</ul>\n<p>​</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n  &lt;path d=\"M150 0 L75 200 L205 270 Z\" />\n&lt;/svg>\n\n//定义了一条路径，它开始于位置150 0，到达位置75 200，然后从那里开始到205 270，\n最后在150 0关闭路径。</code></pre></div>\n<h3>16.3 写 svg 图并实现引入</h3>\n<p><strong>1、svg 文档</strong>\n<xml>第一行包含了 XML 声明。\nstandalone 属性规定此 SVG 文件是否是”独立的”，或含有对外部文件的引用，standalone=“no” 意味着 SVG 文档会引用一个外部文件 - 在这里，是 DTD 文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=\"1.0\" standalone=\"no\"?>\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n\n&lt;svg width=\"100%\" height=\"100%\" version=\"1.1\"\nxmlns=\"http://www.w3.org/2000/svg\">\n\n&lt;circle cx=\"42\" cy=\"42\" r=\"40\" stroke=\"black\"\nstroke-width=\"2\" fill=\"red\"/>\n\n&lt;/svg></code></pre></div>\n<p><strong>2、四种引入方式（除了引入，当然也可直接写入 html 中）</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 1、img:\n &lt;img src=\"./mySvg.svg\" alt=\"\">\n\n 2、iframe:\n &lt;iframe src=\"./mySvg.svg\">&lt;/iframe>\n\n 3、embed:\n &lt;embed src=\"./mySvg.svg\" type=\"image/svg+xml\" />\n\n 4、object:\n &lt;object data=\"./mySvg.svg\" type=\"image/svg+xml\">&lt;/object>\n</code></pre></div>\n<p>​</p>\n<h2>十七、字体图标</h2>\n<h3>17.1 下载字体、图标</h3>\n<p>如下载字体：大图网“<a href=\"http://www.daimg.com/font/%E2%80%9D\">http://www.daimg.com/font/”</a>\n下载图标：阿里巴巴矢量图标库：<a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn/</a> ，可通过 link 引入在线图标，也可下载本地引入\nantd 里面也有提供一些常用图标，引入相应标签即可</p>\n<h3>17.2 引入并使用字体</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@font-face {\n\n //1、通过font-family属性自定义字体引用名称\n  font-family: \"myfont\";\n\n  //2、下载字体在font-face 的src属性中引入，\n  format 指的是自定义的字体的格式，主要用来帮助浏览器识别，\n  其值主要有以下几种类型：truetype,opentype,truetype-aat,embedded-opentype,avg等\n\n  src: url(\"./RawMarukoGothicCJKtc-Regular.ttf\") format(\"truetype\");\n}\n\n.wordContent {\n//3、引用\n  font-family: \"myfont\";\n}</code></pre></div>\n<p>常见字体格式：\nTureTpe(.ttf)、OpenType(.otf)、Web Open Font Format(.woff)、Embedded Open Type(.eot)、SVG(.svg)\n​</p>\n<h3>17.3 文本超出问题</h3>\n<ol>\n<li>单行文本溢出省略号效果</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.ellipsis {\n　　overflow:hidden;\n　　white-space:nowrap;\n　　text-overflow:ellipsis;\n}\n</code></pre></div>\n<p>​2. 指定 N 行文字溢出省略号效果（以 4 行为例）----因使用了 WebKit 的 CSS 扩展属性，适用于 WebKit 浏览器及移动端</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.ellipsis_four {\n　　display:-webkit-box; // 必须结合的属性，将对象作为弹性伸缩盒子模型展示\n　　-webkit-line-clamp: 4; // 需要结合其他属性来使用才有效果\n　　-webkit-box-orient: vertical; // 必须结合的属性，设置子元素(在这里指文字)的排列方式\n　　overflow: hidden;\n}</code></pre></div>\n<p>​</p>\n<p>了解更多：<a href=\"https://blog.csdn.net/c327127960/article/details/121692681\">https://blog.csdn.net/c327127960/article/details/121692681</a>\n​</p>\n<h2>十八、如何设置字体</h2>\n<p>如何全局给中英文设置不同字体，font-family\n了解更多：<a href=\"https://segmentfault.com/a/1190000006110417\">https://segmentfault.com/a/1190000006110417</a>\n​</p>\n<h3>18.1 字体中英文写法</h3>\n<p><strong>大多数情况下直接使用中文显示名称也能正确的显示，但是有一些用户的特殊设置会导致中文声明无效。\n因此，保守的做法是使用字体的字体名称（英文）或者两者兼写。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">font-family: STXihei, \"Microsoft YaHei\";\nfont-family: STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\";</code></pre></div>\n<h3>18.2 声明英文字体</h3>\n<p><strong>由于英文字体中大多不包含中文，我们可以先进行英文字体的声明，这样不会影响到中文字体的选择，因此优先使用最优秀的英文字体，中文字体声明则紧随其次。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">font-family: Arial, \"Microsoft YaHei\";</code></pre></div>\n<h3>18.3 兼容各浏览器，中英文整合</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> Helvetica, Tahoma, Arial //英文、数字字体的最佳写法\n\nfont-family: Helvetica, Tahoma, Arial, \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\";\nfont-family: Helvetica, Tahoma, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\";</code></pre></div>\n<h3>18.4 补充字体族名称</h3>\n<p><strong>字体族大体上分为两类：sans-serif（无衬线体）和 serif（衬线体），当所有的字体都找不到时，我们可以使用字体族名称作为操作系统最后选择字体的方向。一般非衬线字体在显示器中的显示效果会比较好，因此我们需要在最后添加 sans-serif。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">font-family: Helvetica, Tahoma, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\", sans-serif;</code></pre></div>\n<p>​</p>\n<h2>十九、合理规划页面布局（理论知识）</h2>\n<ol>\n<li>\n<p>整体性\n整体性是指设计元素的整体与统一。整体统一的布局指页面上不同元素相互影响如同一个整体，页面中所有按钮等控件元素都应该保持一致。对于网页重复出现的形尺寸、色彩都是一个有机联系的整体。把页面元素组织起来形成组块，让页面更加整体有利于统一版面布局的风格。\n​</p>\n</li>\n<li>\n<p>对比性\n网页是由很多元素构成的，这些元素的重要性各不相同。有些内容元素需要重点突出，此时就需要通过对比，创造出视觉趣味性，同时引导用户的注意力。对比包含色对比、字体字号对比、区块面积大小对比等。\n​</p>\n</li>\n<li>\n<p>均衡性\n网页中的均衡是指页面上文字、形状、色彩等因素在视觉上的平衡。视觉平衡分为对称平衡和不对称平衡。网页中各个元素是有重量的，如果达到对称平衡，页面则显得宁静稳重。为了在页面中添加趣味性，可以选择不对称平衡。</p>\n</li>\n</ol>\n<p>布局案例：\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1641373434176-174e4192-bdec-41af-87f9-4d6cc0dede32.png#clientId=ud9d176d2-1c46-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=461&#x26;id=ud691085a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=461&#x26;originWidth=781&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=7437&#x26;status=done&#x26;style=none&#x26;taskId=ub82f7fbc-0102-4a30-85ac-9cf5d678877&#x26;title=&#x26;width=781\" alt=\"image.png\">\n方案 1：上边和侧边固定定位，中间内容使用 margin-top 和 margin-left 间隔开，\n注意：margin 重叠问题。\n​</p>\n<p>方案 2：利用弹性容器 flex-grow：1，align-items：strech 属性实现宽高按屏幕剩余部分扩张。</p>\n<p>方案 3：grid 布局，控制行列数，设置对应宽高</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  display: grid;\n  grid-template-columns:200px auto;\n  grid-template-rows: 100px auto;</code></pre></div>\n<p>​</p>\n<p>​</p>\n<p>css 练习案例：\n1、合理使用伪类::after 、 ::before，可以减少标签，简化代码结构\n2、类似样式给多个类名，简化代码\n<img src=\"https://cdn.nlark.com/yuque/0/2022/png/25568957/1642730164369-ac87fb7f-c045-448d-b69e-6c95df2ae034.png#clientId=u10ba7789-2beb-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=739&#x26;id=u03dc1f7a&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=665&#x26;originWidth=366&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=68874&#x26;status=done&#x26;style=none&#x26;taskId=u5267c59f-fcc1-4285-bf55-6d1373856fe&#x26;title=&#x26;width=406.6666774396546\" alt=\"image.png\"></p>\n<h2>二十、了解滤镜</h2>\n<p>了解更多：<a href=\"https://juejin.cn/post/6844904115177259022?utm_source=gold_browser_extension\">https://juejin.cn/post/6844904115177259022?utm_source=gold_browser_extension</a>\nfilter：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a>\n​</p>\n<h3>20.1 filter 属性值的各种含义用法：</h3>\n<h4>1、filter: url(resources.svg#c1)</h4>\n<p>获取指向 SVG 过滤器的 URI，该 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/filter\">SVG filter</a> 可以嵌入到外部 XML 文件中。\n​</p>\n<h4>2、filter: blur(5px)</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function/blur()\">blur()</a> 函数将高斯模糊应用于输入图像。radius 定义了高斯函数的标准偏差值，或者屏幕上有多少像素相互融合，因此，较大的值将产生更多的模糊。若没有设置值，默认为 0。该参数可以指定为 CSS 长度，但不接受百分比值。\n​</p>\n<h4>3、filter: brightness(2)</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function/brightness()\">brightness()</a> 函数将线性乘法器应用于输入图像，使其看起来或多或少地变得明亮。值为 0％ 将创建全黑图像。值为 100％ 会使输入保持不变。其他值是效果的线性乘数。如果值大于 100% 提供更明亮的结果。若没有设置值，默认为 1。\n​</p>\n<h4>4、filter: contrast(200%)</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function/contrast()\">contrast()</a> 函数可调整输入图像的对比度。值是 0% 的话，图像会全黑。值是 100%，图像不变。值可以超过 100%，意味着会运用更低的对比。若没有设置值，默认是 1。\n​</p>\n<h4>5、filter: drop-shadow(16px 16px 10px black)</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function/drop-shadow()\">drop-shadow()</a> 函数对输入图像应用阴影效果。阴影可以设置模糊度的，以特定颜色画出的遮罩图的偏移版本，最终合成在图像下面。\n​</p>\n<h4>6、filter: grayscale(100%)</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function/grayscale()\">grayscale()</a> 函数将改变输入图像灰度。amount 的值定义了转换的比例。值为 100% 则完全转为灰度图像，值为 0% 图像无变化。值在 0% 到 100% 之间，则是效果的线性乘数。若未设置值，默认是 0。\n​</p>\n<h4>7、filter: hue-rotate(90deg)</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate()\">hue-rotate()(en-US)</a> 函数在输入图像上应用色相旋转。angle 一值设定图像会被调整的色环角度值。值为 0deg，则图像无变化。若值未设置值，默认为 0deg。该值虽然没有最大值，超过 360deg 的值相当于又绕一圈。\n​</p>\n<h4>8、filter: invert(100%)</h4>\n<h4><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/invert()\">invert()(en-US)</a> 函数反转输入图像。amount 的值定义转换的比例。100% 的价值是完全反转。值为 0% 则图像无变化。值在 0% 和 100% 之间，则是效果的线性乘数。 若值未设置值，默认为 0。</h4>\n<h4>9、filter: opacity(50%)</h4>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter-function/opacity()\">opacity()</a> 转化图像的透明程度。amount 的值定义转换的比例。值为 0% 则是完全透明，值为 100% 则图像无变化。值在 0% 和 100% 之间，则是效果的线性乘数。也相当于图像样本乘以数量。 若值未设置，值默认是 1。该函数与已有的 opacity 属性很相似，不同之处在于通过 filter，一些浏览器为了提升性能会提供硬件加速。\n​</p>\n<h4>10、filter: saturate(200%)</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/saturate()\">saturate()(en-US)</a> 函数转换图像饱和度。amount 的值定义转换的比例。值为 0% 则是完全不饱和，值为 100% 则图像无变化。其他值是效果的线性乘数。超过 100% 则有更高的饱和度。 若未设置值，默认为 1。\n​</p>\n<h4>11、filter: sepia(100%)</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/sepia()\">sepia()(en-US)</a> 函数将图像转换为深褐色。amount 的值定义转换的比例。值为 100% 则完全是深褐色的，值为 0% 图像无变化。值在 0% 到 100% 之间，值是效果的线性乘数。若未设置，值默认是 0。\n​</p>\n<p>​</p>\n<p>​</p>\n<h3>二十一、css 模块化与多类名运用</h3>\n<h3>21.1 css 模块化</h3>\n<p>1、配置\n2、创建.css 文件时以[name].module.css 格式。\n3、导入</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import styles from './Button.module.css';</code></pre></div>\n<p>4、使用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div className={styles.button} role=\"button\">Click Me&lt;/div></code></pre></div>\n<h3>21.2 classnames 库</h3>\n<p>运用场景：在 react 开发中，我们有的时候需要使用 js 来动态判断是否为组件添加 class（类名），这里我们使用到了 classnames\n安装：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install classnames --save</code></pre></div>\n<p>引用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import classnames  from ‘classnames’;</code></pre></div>\n<p>使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Button className={classnames({\n    //这里可以根据各属性动态添加，如果属性值为true则为其添加该类名，如果值为false，则不添加。这样达到了动态添加class的目的\n      base: true,\n      inProgress: this.props.store.submissionInProgress,\n      error: this.props.store.errorOccurred,\n      disabled: this.props.form.valid,\n    })}>\n&lt;Button/></code></pre></div>\n<p>模块化使用：\n了解更多：<a href=\"https://github.com/dvajs/dva/issues/370\">https://github.com/dvajs/dva/issues/370</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &lt;ol\n      className={classnames({\n        [`${styles.wrapItem}`]: true,\n      })}\n    ></code></pre></div>\n<p>[</p>\n<p>](<a href=\"https://github.com/dvajs/dva/issues/370\">https://github.com/dvajs/dva/issues/370</a>)\n​</p>\n<p>​</p>\n<p>​</p>\n<p>​</p>\n<p>​</p>\n<p>​</p>\n<p>​</p>","frontmatter":{"title":"css学习笔记","date":"2022-01-26","description":null,"author":"chang"}},"previous":{"fields":{"slug":"/frontEnd/其他/状态管理zustand/"},"frontmatter":{"title":"状态管理zustand"}},"next":{"fields":{"slug":"/frontEnd/其他/react-native-xiaoshu-0.1.0-changed-notice/"},"frontmatter":{"title":"react-native-xiaoshu 0.1.0 更改通知"}}},"pageContext":{"id":"fae32203-42a7-598a-9559-c512816a233b","previousPostId":"6688c6f0-9493-5ec1-9ac1-3a60c2bec0a0","nextPostId":"b89b91c4-f781-555d-949e-2cb4f7d16375"}},"staticQueryHashes":["2841359383","3257411868"]}