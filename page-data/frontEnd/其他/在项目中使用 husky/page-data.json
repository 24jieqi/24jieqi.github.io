{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/在项目中使用 husky/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"8452f8be-88a2-57d5-8ca5-f3d5a5dac7de","excerpt":"husky Modern native Git hooks made easy 安装 当前版本是  添加 NPM scripts…","html":"<h2>husky</h2>\n<blockquote>\n<p>Modern native Git hooks made easy</p>\n</blockquote>\n<h3>安装</h3>\n<blockquote>\n<p>当前版本是 <code class=\"language-text\">6.0.0</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">## npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> husky --save-dev\n\n<span class=\"token comment\">## yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> husky <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<h3>添加 NPM scripts 命令</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> set-script prepare <span class=\"token string\">\"husky install\"</span>\n<span class=\"token function\">npm</span> run prepare</code></pre></div>\n<p>这一步会在项目根目录生成一个 <code class=\"language-text\">.husky</code> 文件夹，以后所有 <code class=\"language-text\">husky</code> 相关任务都在这个文件夹内。团队内其他人只要安装依赖也自动执行这个命令。</p>\n<p>所有的任务都是针对 <code class=\"language-text\">git add</code> 的文件进行操作。</p>\n<h2>代码检测/格式化</h2>\n<p>安装 lint-staged</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">## npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> lint-staged --save-dev\n\n<span class=\"token comment\">## yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> lint-staged <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<p>在 <code class=\"language-text\">package.json</code> 添加 <code class=\"language-text\">lint-staged</code> 字段，该字段是一个对象格式的配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.{yml,yaml,md}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"prettier --write\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git add\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"*.{js,jsx,ts,tsx}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prettier --write\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git add\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第一个规则/配置，针对 <code class=\"language-text\">.yml</code>、<code class=\"language-text\">.yaml</code>、<code class=\"language-text\">.md</code> 后缀文件使用 <code class=\"language-text\">prettier</code> 格式化，如果文件改动了并添加到 Git 待提交文件队列。</p>\n<p>第二个规则/配置，针对 <code class=\"language-text\">.js</code>、<code class=\"language-text\">.jsx</code>、<code class=\"language-text\">.ts</code>、<code class=\"language-text\">.tsx</code> 后缀文件使用 <code class=\"language-text\">eslint</code> 进行代码检测在格式化等操作。</p>\n<p>添加一个 NPM scripts 命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged --allow-empty\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">--allow-empty</code> 可以解决当没有变更的时候 <code class=\"language-text\">git add</code> 抛错。</p>\n<p>控制台运行命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx husky <span class=\"token function\">add</span> .husky/pre-commit <span class=\"token string\">\"npm run lint-staged\"</span></code></pre></div>\n<p>生成文件 <code class=\"language-text\">.husky/pre-commit</code>，在 Git 提交前执行的任务</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span>\n\n<span class=\"token function\">npm</span> run lint-staged</code></pre></div>\n<h2>Git commit message 检测</h2>\n<p>安装 commitlint 相关依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">## npm</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @commitlint/<span class=\"token punctuation\">{</span>cli,config-conventional<span class=\"token punctuation\">}</span> --save-dev\n\n<span class=\"token comment\">## yarn</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @commitlint/<span class=\"token punctuation\">{</span>cli,config-conventional<span class=\"token punctuation\">}</span> <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<p><code class=\"language-text\">@commitlint/config-conventional</code> 是 commit message 规则，详情请查看 npm 主页。</p>\n<p>例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"foo: some message\"</span> <span class=\"token comment\"># fails</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fix: some message\"</span> <span class=\"token comment\"># passes</span></code></pre></div>\n<p>在项目根目录添加 <code class=\"language-text\">commitlint.config.js</code> 文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@commitlint/config-conventional\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>控制台运行命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx husky <span class=\"token function\">add</span> .husky/commit-msg <span class=\"token string\">'npx --no-install commitlint --edit \"$1\"'</span></code></pre></div>\n<p>生成文件 <code class=\"language-text\">.husky/commit-msg</code>，在 Git 提交时检测 commit message 的任务。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dirname</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span><span class=\"token variable\">)</span></span>/_/husky.sh\"</span>\n\nnpx --no-install commitlint <span class=\"token parameter variable\">--edit</span> <span class=\"token variable\">$1</span></code></pre></div>\n<p>每当提交 Git commit 的时候就会起作用。</p>","frontmatter":{"title":"Git 项目中使用 husky","date":"2021-11-03","description":null,"author":"onlyling"}},"previous":{"fields":{"slug":"/frontEnd/其他/从零开始配置 Nginx + HTTPS/"},"frontmatter":{"title":"从零开始配置 Nginx + HTTPS"}},"next":{"fields":{"slug":"/frontEnd/其他/开发、测试环境地址/"},"frontmatter":{"title":"Web 端开发、测试环境地址"}}},"pageContext":{"id":"8452f8be-88a2-57d5-8ca5-f3d5a5dac7de","previousPostId":"1c0b1030-0bb2-5770-a4d4-d8d708c8e667","nextPostId":"10768e4d-5082-5cbf-bfcd-264019343667"}},"staticQueryHashes":["2841359383","3257411868"]}