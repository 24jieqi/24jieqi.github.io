{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/TypeScript 环境使用 egg-jwt/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"84c9756f-209a-5da2-b819-47812550d3f8","excerpt":"JWT JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。 部分容器/场景无法使用 ，JWT 就是一个不错的选择。 基础配置     使用 路由配置 控制器中使用","html":"<h2>JWT</h2>\n<p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。</p>\n<p>部分容器/场景无法使用 <code class=\"language-text\">cookie</code>，JWT 就是一个不错的选择。</p>\n<h2>基础配置</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 安装依赖\nyarn add egg-jwt</code></pre></div>\n<p><code class=\"language-text\">config/config.default.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EggAppConfig<span class=\"token punctuation\">,</span> EggAppInfo<span class=\"token punctuation\">,</span> PowerPartial <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"egg\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span>appInfo<span class=\"token operator\">:</span> EggAppInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> PowerPartial<span class=\"token operator\">&lt;</span>EggAppConfig<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">// override config from framework / plugin</span>\n  <span class=\"token comment\">// use for cookie sign key, should change to your own and keep security</span>\n  config<span class=\"token punctuation\">.</span>keys <span class=\"token operator\">=</span> appInfo<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"_1589209631587_7631\"</span>\n\n  <span class=\"token comment\">// add your egg config in here</span>\n  <span class=\"token comment\">// 统一处理错误</span>\n  config<span class=\"token punctuation\">.</span>middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"errorHandler\"</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// jwt</span>\n  <span class=\"token comment\">// 参数参考：https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback</span>\n  config<span class=\"token punctuation\">.</span>jwt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    secret<span class=\"token operator\">:</span> <span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// secretOrPublicKey</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// add your special config in here</span>\n  <span class=\"token keyword\">const</span> bizConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// sourceUrl: `https://github.com/eggjs/examples/tree/master/${appInfo.name}`,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// the return config will combines to EggAppConfig</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>bizConfig<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">config/plugin.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EggPlugin <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"egg\"</span>\n\n<span class=\"token keyword\">const</span> plugin<span class=\"token operator\">:</span> EggPlugin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// static: true,</span>\n  <span class=\"token comment\">// nunjucks: {</span>\n  <span class=\"token comment\">//   enable: true,</span>\n  <span class=\"token comment\">//   package: 'egg-view-nunjucks',</span>\n  <span class=\"token comment\">// },</span>\n\n  <span class=\"token comment\">// JWT</span>\n  jwt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    enable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">package</span><span class=\"token operator\">:</span> <span class=\"token string\">\"egg-jwt\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> plugin</code></pre></div>\n<p><code class=\"language-text\">app/middleware/jwt.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> koajwt <span class=\"token keyword\">from</span> <span class=\"token string\">\"koa-jwt2\"</span>\n\n<span class=\"token comment\">// 文档上这样使用，但是中间件类型不匹配</span>\n<span class=\"token comment\">// app.get(\"/\", app.jwt, \"render.index\");</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">koajwt</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">app/middleware/error_handler.ts</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Context <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"egg\"</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">errorHandler</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 所有的异常都在 app 上触发一个 error 事件，框架会记录一条错误日志</span>\n      ctx<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>status <span class=\"token operator\">||</span> <span class=\"token number\">500</span>\n      <span class=\"token comment\">// 生产环境时 500 错误的详细错误内容不返回给客户端，因为可能包含敏感信息</span>\n      <span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span>\n        status <span class=\"token operator\">===</span> <span class=\"token number\">500</span> <span class=\"token operator\">&amp;&amp;</span> ctx<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>env <span class=\"token operator\">===</span> <span class=\"token string\">\"prod\"</span>\n          <span class=\"token operator\">?</span> <span class=\"token string\">\"Internal Server Error\"</span>\n          <span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message\n\n      <span class=\"token comment\">// 从 error 对象上读出各个属性，设置到响应中</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>helper<span class=\"token punctuation\">.</span><span class=\"token function\">APIFail</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token number\">422</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>detail <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>errors\n      <span class=\"token punctuation\">}</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>使用</h2>\n<p>路由配置</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Application <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"egg\"</span>\n\n<span class=\"token comment\">/**\n * 构建路径\n * @param p 路径\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildPath</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/app/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> Application<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> controller<span class=\"token punctuation\">,</span> router <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app\n  <span class=\"token comment\">// jwt 中间件，把请求头部带的 Authorization 转换成具体的数据</span>\n  <span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>middleware<span class=\"token punctuation\">.</span><span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">)</span>\n\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>PostLogin<span class=\"token punctuation\">)</span>\n\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"micro-blog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> jwt<span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>PostMicroBlog<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>控制器中使用</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"egg\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 用户登录；\n   * {string} user_name 用户名\n   * {string} password 密码\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">PostLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ctx<span class=\"token punctuation\">,</span> app <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request\n\n    <span class=\"token comment\">// 用户的登录业务</span>\n\n    <span class=\"token comment\">// 登录成功</span>\n    <span class=\"token comment\">// 生成 token</span>\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n        user_name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>user_name<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        expiresIn<span class=\"token operator\">:</span> <span class=\"token string\">\"24h\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>helper<span class=\"token punctuation\">.</span><span class=\"token function\">APISuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      token<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 请求头注意，Authorization: Bearer xxxxxx</span>\n  <span class=\"token comment\">// 注意需要在上面生成的 token 上添加 `Bearer `，完整的数据是 `Bearer ${token}`</span>\n  <span class=\"token comment\">// 部分场景访问接口可能没有 token，koa-jwt2 会在应用内抛出一个错误，需要一个统一处理错误的中间件</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">PostMicroBlog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ctx <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token comment\">// ctx.state.user 上会有对应的数据</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>helper<span class=\"token punctuation\">.</span><span class=\"token function\">APISuccess</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"TypeScript 环境使用 egg-jwt","date":"2021-11-03","description":null,"author":"onlyling"}},"previous":{"fields":{"slug":"/frontEnd/其他/PDF 单位尺寸与像素转换/"},"frontmatter":{"title":"PDF 单位尺寸与像素转换"}},"next":{"fields":{"slug":"/frontEnd/其他/Verdaccio 搭建私有 NPM/"},"frontmatter":{"title":"Verdaccio 搭建私有 NPM"}}},"pageContext":{"id":"84c9756f-209a-5da2-b819-47812550d3f8","previousPostId":"bf58eca1-68a6-5491-8523-a52f4a88402b","nextPostId":"1a9b890e-4472-5aa2-99ad-e6ab4a09dfee"}},"staticQueryHashes":["2841359383","3257411868"]}