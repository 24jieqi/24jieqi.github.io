{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/git的使用/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"c086ef4e-5a50-5d31-9931-29cd3848dd9c","excerpt":"了解更多：https://www.bootcss.com/p/git-guide/ 一、git 的概念 1.1 概念 git 是一个版本控制器，能够更方便我们管理不同版本的文件。\n​ 1.2 控制版本 存储、追踪目录和文件的修改历史。\n​ 1.3 使用情况 比如：…","html":"<p>了解更多：<a href=\"https://www.bootcss.com/p/git-guide/\">https://www.bootcss.com/p/git-guide/</a></p>\n<h2>一、git 的概念</h2>\n<h3>1.1 概念</h3>\n<p>git 是一个<strong>版本控制</strong>器，能够更方便我们<strong>管理不同版本的文件</strong>。\n​</p>\n<h3>1.2 控制版本</h3>\n<p>存储、追踪目录和文件的修改历史。\n​</p>\n<h3>1.3 使用情况</h3>\n<p>比如：\n1、你怕修改之后万一出现什么错误，把原来的文件也弄坏了；\n2、你修改到一定程度，改错了，想撤销，但你不小心点了保存，保存之后是不能撤销的。\n​</p>\n<h2>二、安装与配置 git</h2>\n<h3>2.1 安装</h3>\n<p>windown 系统下的就是下载 e 文件，一直点击下一步就可以了。\n安装完成后，在任何一个文件夹内点击鼠标右键：会看到 Git Bush Here 与 Git Gui Here\n​</p>\n<h3>2.2 配置</h3>\n<p>在安装完成之后，需要对 git 进行配置，用来说明你的身份。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 配置账号： git config --global user.name \"lichang\"\n2. 配置邮箱：git config --global user.email \"2217024156@qq.com\"\n3. 生成密钥： ssh-keygen -t rsa -C \"2217024156@qq.com\"</code></pre></div>\n<h2>三、使用</h2>\n<h3>3.1 建立本地 git 仓库，cd 到你的本地项目根目录下，执行 git init 命令</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd 本地工程根目录 git init  //这个目录就变成了git可以管理的仓库</code></pre></div>\n<h3>3.2 将本地项目工作区的所有文件添加到暂存区。</h3>\n<p>小数点 “.” ，意为添加文件夹下的所有文件；也可以将 “.” 换成具体的文件名，如果想添加项目中的指定文件，那就把 “.” 改为指定文件名即可</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git add .</code></pre></div>\n<h3>3.3 将暂存区的文件提交到本地仓库</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git commit -m \"注释说明\"</code></pre></div>\n<h3>3.4 工作流</h3>\n<p>你的本地仓库由 git 维护的三棵“树”组成。</p>\n<ul>\n<li>第一个是你的 工作目录，它持有实际文件；</li>\n<li>第二个是缓存区（Index），它像个缓存区域，临时保存你的改动；</li>\n<li>最后是 HEAD，指向你最近一次提交后的结果。</li>\n</ul>\n<p>​</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/25568957/1640532233147-8102bf81-8e2c-4149-8a81-ebca678a194a.png#clientId=u0bcc3e5e-39fc-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=225&#x26;id=u5e3a8e3e&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=449&#x26;originWidth=999&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=80926&#x26;status=done&#x26;style=none&#x26;taskId=ub6cf7aaf-ffe3-45fd-898f-89e76691380&#x26;title=&#x26;width=499.5\" alt=\"image.png\"></p>\n<p>​</p>\n<h3>3.5 将本地代码仓库关联到 github 上</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git remote add origin https://github.com/KeymonWong/JsAndObjc.git</code></pre></div>\n<p>在这一步时如果出现错误：\nfatal:remote origin already exists\n那就先输入\ngit remote rm origin\n再输入\ngit remote add origin <a href=\"https://github.com/KeymonWong/JsAndObjc.git\">https://github.com/KeymonWong/JsAndObjc.git</a>\n就不会报错了。\n​</p>\n<h3>3.6 将代码由本地仓库上传到 github 远程仓库</h3>\n<p>获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）：\ngit pull —rebase origin master //不加这句可能报错，原因是 github 中的 README.md 文件不在本地仓库中 //可以通过该命令进行代码合并\n把当前分支 master 推送到远程，执行此命令后有可能会让输入用户名、密码：\ngit push -u origin master //执行完之后如果无错误就上传成功了，需要提示的是这里的 master 是 github 默认的分支， //如果你本地的当前分支不是 master，就用 git checkout master 命令切换到 master 分支， //如果你想用本地当前分支上传代码，则把 pull 命令里的 master 切换成你的当前分支名即可。</p>\n<h3></h3>\n<p>3.7 创建一个远端服务器克隆版本</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone username@host:/path/to/repository</code></pre></div>\n<h3>3.8 获取远程库与本地同步合并</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git pull\n\n等同于git fetch与git merge</code></pre></div>\n<h3>3.9 将改动提交到远端仓库</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push origin master</code></pre></div>\n<h3>3.10 查看与恢复备份版本</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.用git log查看版本序列号\n\n2.输入git reset --hard 序列号这里的序列号复制粘贴过来（commit后黄色字体）</code></pre></div>\n<h2>四、分支</h2>\n<p>了解更多分支概念：\n<a href=\"https://blog.csdn.net/u010874036/article/details/51422978\">https://blog.csdn.net/u010874036/article/details/51422978</a>\n<a href=\"https://www.cnblogs.com/matengfei123/p/8252128.html\">https://www.cnblogs.com/matengfei123/p/8252128.html</a></p>\n<h3>4.1 git 的分支是什么</h3>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/25568957/1640533839532-c49ef6db-53e8-453e-a4df-ce046c3b0240.png#clientId=u0bcc3e5e-39fc-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=185&#x26;id=uaf6c9be3&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=370&#x26;originWidth=1148&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=69289&#x26;status=done&#x26;style=none&#x26;taskId=u8edb78f9-5fe5-4546-8d6e-5671daa11ee&#x26;title=&#x26;width=574\" alt=\"image.png\">\n分支就是从主线上分离出来进行另外的操作，而又不影响主线，主线又可以继续干它的事，是不是有点像线程，最后分支做完事后合并到主线上而分支的任务完成可以删掉了。这样是不是很方便，主线继续做它的事，分支用来解决临时需求，二者互不相干。\ngit 的分支功能特别的强大，它不需要将所有数据进行复制，只要重新创建一个分支的指针指向你需要从哪里开始创建分支的提交对象(commit)，然后进行修改再提交，那么新分支的指针就会指向你最新提交的这个 commit 对象，而原来分支的指针则指向你原来开发的位置，当你在哪个分支开发，HEAD 就指向那个分支的最新提交对象 commt。\n​</p>\n<h3>4.1 创建一个叫做“feature_x”的分支并切换到 feature_x 分支</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout -b feature_x\n\n等同于\ngit branch feature_x\ngit checkout  feature_x</code></pre></div>\n<h3>4.2 切换回主分支</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout master</code></pre></div>\n<p>​</p>\n<h3>4.3 再把新建的分支删掉：</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git branch -d feature_x</code></pre></div>\n<p>​</p>\n<h3>4.4 除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git push origin &lt;branch></code></pre></div>\n<h3>4.5 分支常用指令</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">查看分支：git branch\n创建分支：git branch &lt;name>\n切换分支：git checkout &lt;name>\n创建+切换分支：git checkout -b &lt;name>\n合并某分支到当前分支：git merge &lt;name>\n删除分支：git branch -d &lt;name></code></pre></div>\n<h3>4.6 分支合并的方式</h3>\n<p><strong>1、直接移动 HEAD 指针</strong>\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/25568957/1640568910065-95859de4-61b6-4e5f-afaf-8ca6699f3014.png#clientId=u3151e933-abd7-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=309&#x26;id=u860b06bd&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=309&#x26;originWidth=579&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=29783&#x26;status=done&#x26;style=none&#x26;taskId=u3b485d9f-1296-4a80-9e66-18a9f498068&#x26;title=&#x26;width=579\" alt=\"image.png\">\n<strong>​</strong></p>\n<p><strong>2、产生新的 commit 对象 c8</strong>\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/25568957/1640569007840-6b1941cf-aa4f-45b9-95bb-0c3c35d0f3ba.png#clientId=u3151e933-abd7-4&#x26;crop=0&#x26;crop=0&#x26;crop=1&#x26;crop=1&#x26;from=paste&#x26;height=326&#x26;id=u7534d5a2&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=326&#x26;originWidth=672&#x26;originalType=binary&#x26;ratio=1&#x26;rotation=0&#x26;showTitle=false&#x26;size=39999&#x26;status=done&#x26;style=none&#x26;taskId=u8048d9fe-d741-4c1d-a96f-8431761d782&#x26;title=&#x26;width=672\" alt=\"image.png\">\n​</p>\n<p>问题：\n避免冲突？\n远程分支？追踪分支？\n​</p>\n<p>git fetch 与 git pull 区别？</p>\n<ul>\n<li>fetch 是将远程代码更新到本地，但是不会执行合并操作，需要自己查看，解决冲突什么的，然后自己再执行 merge 将更新来的代码合并到我们自己制定的分支</li>\n<li>pull 就将这两个操作合成了一步，直接更新服务器代码更新并合并到到本地指定分支，当然遇到冲突也必须要自己解决。</li>\n</ul>\n<p>​</p>\n<p>​</p>\n<h2>五、提交规范：</h2>\n<p>type</p>\n<ul>\n<li>用于说明 commit 的类别，只允许使用下面 7 个标识。</li>\n<li>●feat :新功能(feature)</li>\n<li>●fix: 修补 bug</li>\n<li>●docs:文档(documentation)</li>\n<li>●style: 格式(不影响代码运行的变动)</li>\n<li>●refactor: 重构(即不是新增功能，也不是修改 bug 的代码变动)</li>\n<li>●test :增加测试</li>\n<li>●chore :构建过程或辅助工具的变动</li>\n</ul>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//修改了样式可以写\ngit commit -m 'style: tabs样式优化'\n\n//添加了新功能可以写\ngit commit -m 'feat: 添加异形btn'</code></pre></div>\n<p>​</p>","frontmatter":{"title":"git的使用","date":"2022-01-26","description":null,"author":"chang"}},"previous":{"fields":{"slug":"/frontEnd/其他/React与hooks学习/"},"frontmatter":{"title":"react学习笔记"}},"next":{"fields":{"slug":"/frontEnd/其他/less使用/"},"frontmatter":{"title":"less的使用"}}},"pageContext":{"id":"c086ef4e-5a50-5d31-9931-29cd3848dd9c","previousPostId":"d1518997-e31c-5a9c-8dfe-20797a02fc9a","nextPostId":"d88a7a92-be9b-55b3-aeea-570cd2e8fc15"}},"staticQueryHashes":["2841359383","3257411868"]}