{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/其他/TypeScript的学习/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"9a579d75-f274-5b71-becb-eda7358d5eb3","excerpt":"1.1 TypeScript ​ TypeScript 是 JavaScript 的超集，它完全契合 JavaScript 的语法，并对 JavaScript 语法进行扩展。 ​ TypeScript 弥补了 JavaScript 的缺点，因为 javascript…","html":"<h4>1.1 TypeScript</h4>\n<p>​ TypeScript 是 JavaScript 的超集，它完全契合 JavaScript 的语法，并对 JavaScript 语法进行扩展。</p>\n<p>​ TypeScript 弥补了 JavaScript 的缺点，因为 javascript 是弱类型的语言，只有在编译运行的时候才会提示错误，而 Typescript 在代码编写的时候就可以进行类型检测，极大规范了代码编写的规范，也让代码更加的通俗易懂。</p>\n<h4>1.2 基础类型</h4>\n<h5>1.2.1 布尔值</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<h5>1.2.2 数字</h5>\n<p>​ TypeScript 支持十进制、十六进制、二进制、八进制等字面量。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> deLiteral <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">let</span> hexLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> binaryLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> octalLiteral<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>1.2.3 字符串</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"smith\"</span></code></pre></div>\n<h5>1.2.4 数组</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> array01<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 数字类型的数组</span>\n<span class=\"token keyword\">let</span> array02<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 字符串类型的数组</span>\n<span class=\"token keyword\">let</span> array03<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 字符串类型的数组</span>\n<span class=\"token keyword\">let</span> array03<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 联合类型的数组</span></code></pre></div>\n<h5>1.2.5 元组</h5>\n<p>​ 元组 Tuple 是固定数组长度和类型的数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> array01<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> array02<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">/// 报错</span></code></pre></div>\n<h5>1.2.6 枚举</h5>\n<p>​ 枚举 enum 是对 JavaScript 标准数据类型的一个补充。 像 C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。使用枚举我们可以定义一些带名字的常量。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">{</span>\n  red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认情况下，从0开始为元素编号</span>\n  green<span class=\"token punctuation\">,</span>\n  blue<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>red <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">let</span> d<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// green</span></code></pre></div>\n<h5>1.2.7 任意值</h5>\n<p>​ 在 typescript 中任何类型都可以被归为 any 类型。这让 any 类型成为了 typescript 中的顶级类型。</p>\n<p>​ 使用 any 类型会逃过 typescript 的静态类型检测，就相当于写 javascript，尽量不要用 any 类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token string\">\"Semlinker\"</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<h5>1.2.8 Unknown</h5>\n<p>​ 所有类型都可以被赋值给 unknown。</p>\n<p>​ unknown 与 any 最大的区别是：任何类型的值可以赋值给<code class=\"language-text\">any</code>，同时<code class=\"language-text\">any</code>类型的值也可以赋值给任何类型。<code class=\"language-text\">unknown</code> 任何类型的值都可以赋值给它，但它只能赋值给<code class=\"language-text\">unknown</code>和<code class=\"language-text\">any</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span>\nnotSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">let</span> uncertain<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> notSure <span class=\"token comment\">// Error</span></code></pre></div>\n<h5>1.2.9 null 和 undefined</h5>\n<p>​ 默认情况下 null 和 undefined 是所有类型的子类型。你可以把 null 和 undefined 赋值给其他类型。</p>\n<p>​ 如果你在 tsconfig.json 指定了<code class=\"language-text\">\"strictNullChecks\":true</code> ，<code class=\"language-text\">null</code> 和 <code class=\"language-text\">undefined</code> 只能赋值给 <code class=\"language-text\">void</code> 和它们各自的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">666</span>\nnum <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nnum <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<h5>1.2.10 never</h5>\n<p>​ never 类型表示的是那些永远都不存在的值的类型。</p>\n<p>​ 1）一个函数执行时抛出了异常，那么这个函数永远不存在返回值。</p>\n<p>​ 2）函数中执行无限循环的代码，使得程序永远无法运行到函数返回值那一步，永不存在返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loopForever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>1.3 接口 interface</h4>\n<h5>1.3.1 什么是接口</h5>\n<p>​ 接口是对类的行为的抽象，也可以对对象进行描述。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 定义的变量 必须完全包含接口中定义的各个属性，不能多，也不能少</span>\n<span class=\"token keyword\">let</span> kobe<span class=\"token operator\">:</span>Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'Kobe'</span>\n    age<span class=\"token operator\">:</span><span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.3.2 可选|只读|任意属性</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在属性前面加readonly 将该属性变为只读，只能在对象刚刚创建的时候修改其值。</span>\n\t<span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在属性后面加? 将该属性变为可选属性</span>\n\tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 确定属性和可选属性的类型都必须是任意属性的类型的子集</span>\n    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.3.3 类型断言</h5>\n<p>​ 类型断言的意义就等同于你在告诉程序，你很清楚自己在做什么，此时程序自然就不会再进行额外的属性检查了。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  money<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> Props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"兔神\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  money<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n  girl<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Props <span class=\"token comment\">// OK</span></code></pre></div>\n<h5>1.3.4 接口和类型别名的区别</h5>\n<p>​ 1）两者都可以用来描述对象或函数的类型，但是语法不同。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 2）类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 3）接口可以定义多次，类型别名不可以。与类型别名不同，接口可以定义多次，会被自动合并为单个接口。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> point<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.3.5 扩展</h5>\n<p>​ 1）接口扩展接口</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 2）类型别名扩展类型别名</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 3）接口扩展类型别名</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PointX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 4）类型别名扩展接口</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointX</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> PointX <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>1.3 函数</h4>\n<h5>1.3.1 函数声明</h5>\n<p>​ 1）声明式</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 2）表达式</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 3）用接口定义函数类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.3.2 可选参数</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// y为可选参数，调用函数的时候可传可不传。</span>\n<span class=\"token comment\">// 可选参数后面不允许再出现必须参数。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isExit</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span> y<span class=\"token operator\">?</span><span class=\"token operator\">:</span> num<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.3.3 参数默认值</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// lastname设有默认参数值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullname</span><span class=\"token punctuation\">(</span>firstname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"brany\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> firstname <span class=\"token operator\">+</span> lastname\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.3.4 剩余参数</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ...三点运算符实现剩余参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5>1.3.5 函数重载</h5>\n<p>​ 函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Types</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Types<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Types<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> b <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>1.4 泛型</h4>\n<p>​ 可以用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。用户就可以以自己的数据类型来使用组件。</p>\n<h5>1.4.1 泛型的定义</h5>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 使用&lt;>来定义泛型</span>\n<span class=\"token comment\">// T 和 U代表泛型变量，只有在调用的时候才会确定它的值，会根据调用者传入不同的类型而确定。</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5>1.4.2 泛型约束</h5>\n<p>​ T 理论上是任何类型，不同于 any，你不管使用它的什么属性或者方法都会报错，需要进行类型约束。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Sizeable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tsize<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">trace</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Sizeable<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>1.4.3 泛型工具类型</h5>\n<p>​ 1）typeof</p>\n<p>​ typeof 的主要用途是在类型上下文中获取变量或者属性的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> kobe<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Kobe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> kobe <span class=\"token comment\">// type Kobe = Person</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> toArray <span class=\"token comment\">// -> (x: number) => number[]</span></code></pre></div>\n<p>​ 2）keyof</p>\n<p>​ keyof 可以用于获取某种类型的所有键，其返回类型是联合类型。keyof 是取 interface 的键,具体是将一个类型映射为它所有成员名称的联合类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person <span class=\"token comment\">// \"name\" | \"age\"</span>\n\n<span class=\"token comment\">// 简单例子</span>\n<span class=\"token comment\">// 实现一个函数 getValue 取得对象的 value</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getValue</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Object<span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 3）in</p>\n<p>​ in 用于取联合类型的值。主要用于数组和对象的构造。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"firstName\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"lastName\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> { firstname: string, lastname:string }</span></code></pre></div>\n<p>​ 4）infer</p>\n<p>​ <code class=\"language-text\">infer</code>可以在<code class=\"language-text\">extends</code>的条件语句中推断待推断的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 使用infer来推断函数的返回值类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">variable</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">funcReturnType</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span>func<span class=\"token operator\">></span> <span class=\"token comment\">// funcReturnType 类型为 number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">varReturnType</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span>variable<span class=\"token operator\">></span> <span class=\"token comment\">// varReturnType 类型为 any</span>\n<span class=\"token comment\">// 在这个例子中，infer R代表待推断的返回值类型，如果T是一个函数，则返回函数的返回值，否则返回any</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ElementOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TTuple</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Union</span> <span class=\"token operator\">=</span> ElementOf<span class=\"token operator\">&lt;</span>TTuple<span class=\"token operator\">></span> <span class=\"token comment\">// Union 类型为 string | number</span>\n<span class=\"token comment\">// 在这个例子中，如果T是一个数组，则返回数组的联合类型，否则返回any</span></code></pre></div>\n<p>​ 5）extends</p>\n<p>​ 有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lengthwise</span> <span class=\"token punctuation\">{</span>\n  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">loggingIdentity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Lengthwise<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 6）Partial</p>\n<p>​ Partial<T>将类型的属性变为可选的。</p>\n<p>​ 但是 <code class=\"language-text\">Partial&lt;T></code> 有个局限性，就是只支持处理第一层的属性，第二层的属性不会进行处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 通过keyof拿到T中的所有键，然后使用in关键字，为所有键添加可选属性，并将值赋给键。</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NewUserInfo</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>UserInfo<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> kobe<span class=\"token operator\">:</span> NewUserInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 7）Required</p>\n<p>​ Required 将类型的属性变成必选。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// -? 是代表移除 ?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 8）Readonly</p>\n<p>​ <code class=\"language-text\">Readonly&lt;T></code> 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 将Todo中的title变为只读</span>\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Delete inactive users\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ntodo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token comment\">// Error: cannot reassign a readonly property</span></code></pre></div>\n<p>​ 9）Pick</p>\n<p>​ Pick 从某个类型中挑出一些属性出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 挑选出title和completed属性</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"completed\"</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 10）Record</p>\n<p>​ Record&#x3C;K extends keyof any, T> 的作用是将 <code class=\"language-text\">K</code> 中所有的属性的值转化为 <code class=\"language-text\">T</code> 类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"home\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"about\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"contact\"</span>\n\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>Page<span class=\"token punctuation\">,</span> PageInfo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  about<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"contact\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"home\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 11）ReturnType</p>\n<p>​ 用来得到一个函数的返回值类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n<span class=\"token comment\">// ReturnType获取到 Func 的返回值类型为 string，所以，foo 也就只能被赋值为字符串了。</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> ReturnType<span class=\"token operator\">&lt;</span>Func<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></code></pre></div>\n<p>​ 12）Exclude</p>\n<p>​ Exclude&#x3C;T, U> 的作用是将某个类型中属于另一个的类型移除掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token comment\">// 如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// \"b\" | \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token comment\">// string | number</span></code></pre></div>\n<p>​ 13）Extract</p>\n<p>​ Extract&#x3C;T, U> 的作用是从 T 中提取出 U。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// \"a\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token comment\">// () =>void</span></code></pre></div>\n<p>​ 13）Omit</p>\n<p>​ Omit&#x3C;T, K extends keyof any> 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"description\"</span><span class=\"token operator\">></span> <span class=\"token comment\">// {title:string,completed:boolean}</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​ 14）NonNullable</p>\n<p>​ NonNullable<T> 的作用是用来过滤类型中的 null 及 undefined 类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> extendsnull <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token comment\">// string[]</span></code></pre></div>\n<p>​ 15）Parameters</p>\n<p>​ Parameters<T> 的作用是用于获得函数的参数类型组成的元组类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 定义</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">P</span>\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token comment\">// []</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span>typeofArray<span class=\"token punctuation\">.</span>isArray<span class=\"token operator\">></span> <span class=\"token comment\">// [any]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span>typeofparseInt<span class=\"token operator\">></span> <span class=\"token comment\">// [string, (number | undefined)?]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span>typeofMath<span class=\"token punctuation\">.</span>max<span class=\"token operator\">></span> <span class=\"token comment\">// number[]</span></code></pre></div>","frontmatter":{"title":"TypeScript 的学习","date":"2022-01-25","description":null,"author":"TT"}},"previous":{"fields":{"slug":"/frontEnd/其他/React Hook的学习/"},"frontmatter":{"title":"React Hook的学习"}},"next":{"fields":{"slug":"/frontEnd/demo/TODO LIST 练习题/"},"frontmatter":{"title":"TODO LIST 练习题"}}},"pageContext":{"id":"9a579d75-f274-5b71-becb-eda7358d5eb3","previousPostId":"da91d71f-7d45-59e0-91c9-fcf289f6e7bc","nextPostId":"585b7e49-6bed-5718-8cdd-2113800bfa82"}},"staticQueryHashes":["2841359383","3257411868"]}