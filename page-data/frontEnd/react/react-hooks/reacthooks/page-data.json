{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/react/react-hooks/reacthooks/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"eb0ce11a-f6d0-5572-b8f7-aef4a8da97e4","excerpt":"1. 简介 hook 是 React 16.8.0 之后出现的\n组件分类：函数组件、类数据。\n有了 hook 之后，不在说又状态组件和无状态组件了，因为通过 hook，函数种也可以使用 state 和 生命周期等特性 类组件中的麻烦： this 指向问题 繁琐的生命周期 其他问题 React hooks 简介 Hook…","html":"<h1>1. 简介</h1>\n<p>hook 是 React 16.8.0 之后出现的\n组件分类：函数组件、类数据。\n有了 hook 之后，不在说又状态组件和无状态组件了，因为通过 hook，函数种也可以使用 state 和 生命周期等特性</p>\n<p>类组件中的麻烦：</p>\n<ol>\n<li>this 指向问题</li>\n<li>繁琐的生命周期</li>\n<li>其他问题 <a href=\"https://react.docschina.org/docs/hooks-intro.html\">React hooks 简介</a></li>\n</ol>\n<p>Hook 专门用于增强函数组件的功能（hook 在类中是不能使用的），使得从理论上，函数组件能成为类组件的替代品</p>\n<p>官方强调：没必须更改已经完成的类组件，官方目前没有计划取消类组件，至少鼓励使用函数组件\nHooks 的本质是一个函数（通常以 use 开头），该函数可以挂载任何功能\nHoos 种类 <a href=\"https://react.docschina.org/docs/hooks-reference.html\">Hook API 索引</a></p>\n<h1>2.State Hook</h1>\n<p>State hook 是一个在函数组件中使用函数（useState） 达成使用状态（state）的目的的一个方法.</p>\n<p>useState</p>\n<ul>\n<li>函数有一个参数，这个参数值表示状态的默认值。\n<ul>\n<li>惰性初始 state\n<ul>\n<li><code class=\"language-text\">initialState</code>  参数只会在组件的初始渲染中起作用。但是如果初始 state 需要通过复杂计算获得，那么即使会忽略 state，也会计算一次。可以传入一个函数，在函数中计算并返回初始的 state，该函数只会在初始渲染时被调用。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token function\">someExpensiveComputation</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> initialState\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>跳过 state 更新\n<ul>\n<li>调用 State Hook 的更新函数并传入与当前相同的 State 时，React 将跳过子组件的渲染及 effect 的执行。（React 使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">Object.is </a> 来比较 state）</li>\n</ul>\n</li>\n<li>函数的返回值是一个数组，该数组一定包含两项\n<ul>\n<li></li>\n<li></li>\n</ul>\n</li>\n</ul>\n<p><strong>一个函数组件中可以有多个状态，这种做法非常有利于横向切分关注点</strong></p>\n<h2>State Hook 原理</h2>\n<p>节点组件 App -> React Element -> function App\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/2927844/1618324946365-8f8f41d7-4faa-4d86-b297-7a320074c42a.png#height=540&#x26;id=FFJpN&#x26;margin=%5Bobject%20Object%5D&#x26;name=image.png&#x26;originHeight=1080&#x26;originWidth=1440&#x26;originalType=binary&#x26;ratio=1&#x26;size=1961385&#x26;status=done&#x26;style=none&#x26;width=720\" alt=\"image.png\">\n<strong>状态表格是附着于组件节点上的，每个组件拥有独立的状态表格</strong>\n<strong>调用过程：</strong></p>\n<ul>\n<li>第 N 次调用 useState（每次状态改变会重新执行该函数，从 0 开始再计算）</li>\n<li>检查该节点的状态数组是否存在下标 N</li>\n<li>不存在\n<ul>\n<li>使用默认值创建一个状态</li>\n<li>将该状态加入状态数组中，下标为 N</li>\n</ul>\n</li>\n<li>存在\n<ul>\n<li>忽略默认值</li>\n<li>直接得到状态值</li>\n</ul>\n</li>\n</ul>\n<p><strong>需要注意的细节</strong></p>\n<ul>\n<li>useState 最好写在函数的起始位置，便于阅读</li>\n<li>useState 严禁 出现在代码块中（判断、循环），这样会改变 useState 在一个函数中执行的次数和顺序，useState 就是通过的固定的顺序的来追踪每个 state</li>\n<li>useState 返回的函数( <a href=\"%E6%94%B9%E5%8F%98%E8%AF%A5%E7%8A%B6%E6%80%81%E7%9A%84%E5%87%BD%E6%95%B0\">1</a> ), 引用不变（节约内存空间）</li>\n<li>使用函数改变数据，若数据和之前的数据完全相等（使用 Object.is 比较），不会导致重新渲染，以达到优化效率的目的。</li>\n<li>使用函数改变数据，传入的值不会和原来的数据进行合并，而是直接替换</li>\n<li>强制刷新组件\n<ul>\n<li>类组件：使用 forceUpdate 函数，不会运行<strong>shouldComponentUpdate</strong></li>\n<li>函数组件：使用一个空对象的 useState</li>\n</ul>\n</li>\n<li><strong>如果某些状态之间没有必然的联系，应该分化成不同的状态，不要合并成一个对象</strong></li>\n<li>和类组件的状态一样，函数组件中改变状态可能是异步的（在 DOM 事件中），多个状态变化会合并以提高效率，此时，不能信任之前的状态，而应该使用回调函数的方式改变状态。如果状态变化要使用到之前的状态，尽量传递函数。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"render\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> show <span class=\"token operator\">?</span> <span class=\"token string\">\"block\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n          <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 传入的函数，在时间运行完成之后统一运行</span>\n            <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          +\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>show<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>show <span class=\"token operator\">?</span> <span class=\"token string\">\"隐藏\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"显示\"</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>** 参考链接**</p>\n<ul>\n<li><a href=\"https://react.docschina.org/docs/hooks-state.html\">使用 State Hook</a></li>\n<li><a href=\"https://react.docschina.org/docs/hooks-reference.html#usestate\">State Hook api</a></li>\n<li><a href=\"https://github.com/Hemuxue/DuYi-React/blob/4-2.StateHook/%E7%AC%94%E8%AE%B0.md\">duyiEDU 笔记</a></li>\n</ul>\n<h1>3.Effect Hook</h1>\n<p><strong>Effect Hook： 用于在函数组件中处理副作用</strong> \n副作用：</p>\n<ul>\n<li>ajxa 请求</li>\n<li>计时器</li>\n<li>其他异步操作</li>\n<li>更改真实 DOM 对象</li>\n<li>本地存储</li>\n<li>其他会对外部产生影响的操作</li>\n</ul>\n<p>函数： useEffect ，该函数接收一个函数作为参数，接收的函数需要进行副作用操作的函数</p>\n<p><strong>细节</strong></p>\n<ul>\n<li>副作用函数运行时间点， 是在页面完成真实的 UI 渲染之后，因此它的执行是异步，并且不会阻塞浏览器\n<ul>\n<li>与类组件中的 componentDidMount 和 componentDidUpdate 的区别\n<ul>\n<li>componentDidMount 和 componentDidUpdate 运行在，更改了真的 DOM，但是用户还没有看到 Ui 更新，同步的。</li>\n<li>useEffect 中的副作用函数运行在，更改了真实 DOM。并且用户已经看到了 UI 更新，异步的。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>每个函数组件中，可以多次使用 useEffect，但是与 useState 一样不能放入条件和循环代码块中。使用多个 useEffect 可以实现关注点分离，一个关注点，使用一个 useEffect</li>\n<li>useEffect 中的副作用函数可以有返回值，返回值必须是一个函数，该函数叫做清理函数，约等于 componentWillUnmount\n<ul>\n<li>该函数运行时间点，在每次运行 副作用之前</li>\n<li>首次渲染组件不会运行</li>\n<li>组件被销毁时，一定会运行</li>\n</ul>\n</li>\n<li>useEffect 函数，可以传递第二个参数\n<ul>\n<li>第二个参数是一个数据</li>\n<li>数组中记录该副作用的依赖数据</li>\n<li>当组件重新渲染后，只有依赖数组与上一次不一样时，才会执行副作用</li>\n<li>所以，当传递了依赖数据之后，如果数据没有发生改变\n<ul>\n<li>副作用函数仅在第一次渲染后运行</li>\n<li>清理函数仅在卸载组件后运行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>副作用函数中，如果使用了函数上下文中的变量，则由于闭包的影响，会导致副作用的函数中变量不会实时变化。</li>\n<li>副作用函数每次注册时，会覆盖掉之前的副作用函数，因此尽量保持副作用函数稳定，否则控制起来比较复杂</li>\n</ul>\n<h1>4.自定义 Hook</h1>\n<p><strong>自定义 Hook</strong> ： 将一些常用的、跨越多个组件的 Hook 功能，抽离出去形成一个函数，该函数就是自定义 Hook，自定义 Hook，由于其内部需要使用 Hook 功能，所以他本身也需要按照 Hook 规则实现：</p>\n<ul>\n<li>函数名必须以 use 开头</li>\n<li>调用自定义 Hook 函数，应该放到顶层</li>\n</ul>\n<p>例有：</p>\n<ul>\n<li>很多组件都需要在第一次加载完成后，获取所有学生数据</li>\n<li>很多组件都需要在第一次加载完成后，启动一个计时器，然后在组件销毁时卸载</li>\n</ul>\n<h1>5.ContextHook</h1>\n<p>接收一个 context 对象（<code class=\"language-text\">React.createContext</code>  的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的  <code class=\"language-text\">&lt;MyContext.Provider></code>  的  <code class=\"language-text\">value</code> prop 决定。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> themes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">light</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#eeeeee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dark</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foreground</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#ffffff\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#222222\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>themes<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ThemeContext.provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>themes<span class=\"token punctuation\">.</span>dark<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ThemeContext.provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Toolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThemedButton</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ThemedButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> them <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ThemeContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>foreground <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      I am styled by theme context!\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usecontext\">更多 ContextHook 信息</a></p>\n<h1>6.Callback Hook</h1>\n<p>函数名： useCallback\n用于得到一个固定值引用值的 函数，通常用于进行性能优化</p>\n<p>useCallback:\n该函数有两个参数：</p>\n<ul>\n<li>函数，useCallback 会固定该函数的引用，只要依赖项没有发生变化，则始终返回之前函数的地址</li>\n<li>数组，记录依赖项</li>\n</ul>\n<p>该函数返回：引用<strong>相对</strong>固定的函数地址</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>other<span class=\"token punctuation\">,</span> setOther<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> handleClickMemo <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> handleClickCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span>\n        <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setOther</span><span class=\"token punctuation\">(</span>other <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>other<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">count</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">count</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClickMemo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">count</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClickCallback<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"render\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上代码，当 App 组件内的状态发生时，会引起 handleClick 的重新重新定义改变了 handleClick 变量的引用，进而触发了 Button 组件的重新渲染，Button 组件真正关心的只有 count，所有仅当 count 改变时，Button 组件再重新渲染才是毕竟理想的状态。使用 useCallback 和 useMemo 可以得到一个当他的依赖项不变化时，**相对固定  **的函数地址，这样可以减少 Button 组件的重新渲染\n<code class=\"language-text\">useCallback(fn, deps)</code>  相当于  <code class=\"language-text\">useMemo(() => fn, deps)</code></p>\n<h1>7.Memo Hook</h1>\n<p>用于保持一些比较稳定的数据，通常用于数据优化。\n效果与 useCallback ，用法一直。用于保存一个函数的返回结构，比 useCallback 更加通用一点</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">XXX</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependence<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果元素本身的引用没有发生变化，那么一定不会重新渲染\n​</p>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#usememo\">memo 更多信息</a>\n​</p>\n<h1>8.Ref Hook</h1>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">useRef</code>  返回一个可变的 ref 对象，其  <code class=\"language-text\">.current</code>  属性被初始化为传入的参数（<code class=\"language-text\">initialValue</code>）。返回的 ref 对象在组件的整个生命周期内保持不变。\n​</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `current` 指向已挂载到 DOM 上的文本输入元素</span>\n    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Focus the input</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://react.docschina.org/docs/hooks-reference.html#useref\">更多 Ref Hook 信息</a></p>\n<h1>9.Layout Effect</h1>\n<p>对应生命周期的 componentDidMount componentDidUpdate\n** 在 React 完成了 DOM 改动，但是还没有呈现给用户，但是还没有渲染的时候的时候执行 ，用法与 useEffect 相同，该函数会阻塞浏览器。**</p>","frontmatter":{"title":"hooks学习笔记","date":"2021-11-02","description":null,"author":"humuxue"}},"previous":null,"next":{"fields":{"slug":"/frontEnd/其他/baidu-map/map/"},"frontmatter":{"title":"百度地图 GIS 测试文章"}}},"pageContext":{"id":"eb0ce11a-f6d0-5572-b8f7-aef4a8da97e4","previousPostId":null,"nextPostId":"76dfe404-f2f8-5abb-992c-c5bfe33b9a97"}},"staticQueryHashes":["2841359383","3257411868"]}