{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/javascript/JavaScript 高级用法学习总结/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"923158c9-2b80-5a4b-9560-5da3d6429e8a","excerpt":"JavaScript 高级用法学习总结 作用域 静态作用域（词法作用域），函数定义的时候 动态作用域，函数的作用域在函数调用的时候 静态，局部变量 value 如果没有，就根据书写的位置，查找上面一层的代码。 动态，局部变量 value 如果没有，就从调用函数的作用域查找。 执行顺序 JavaScript…","html":"<h1>JavaScript 高级用法学习总结</h1>\n<h2>作用域</h2>\n<ul>\n<li>\n<p>静态作用域（词法作用域），函数定义的时候</p>\n</li>\n<li>\n<p>动态作用域，函数的作用域在函数调用的时候</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>静态，局部变量 value 如果没有，就根据书写的位置，查找上面一层的代码。</p>\n<p>动态，局部变量 value 如果没有，就从调用函数的作用域查找。</p>\n<h2>执行顺序</h2>\n<p>JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如变量提升、函数提升。</p>\n<h2>可执行代码</h2>\n<p>全局代码、函数代码、eval 代码。</p>\n<p>当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做”执行上下文(execution contexts)“。</p>\n<h2>执行上下文栈</h2>\n<p>JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** 全局执行上下文 */</span>\n<span class=\"token keyword\">const</span> globalContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 只有当整个应用程序结束的时候，ECStack 才会被清空，所以 ECStack 最底部永远有个 globalContext</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>globalContext<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fun3\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 向执行上下文栈压入一个全局执行上下文</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>globalContext<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 第一步执行 fun1  [globalContext, F1Ctx]</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>F1Ctx<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fun1 内部调用 fun2  [globalContext, F1Ctx, F2Ctx]</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>F2Ctx<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fun2 内部调用 fun3  [globalContext, F1Ctx, F2Ctx, F3Ctx]</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>F3Ctx<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fun3 执行完毕  [globalContext, F1Ctx, F2Ctx]</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fun2 执行完毕  [globalContext, F1Ctx]</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// fun1 执行完毕  [globalContext]</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ECStack 底层永远有个globalContext</span></code></pre></div>\n<h2>变量对象(Variable object，VO)</h2>\n<p>对于每个执行上下文，都有三个重要属性：</p>\n<ul>\n<li>变量对象(Variable object，VO)</li>\n<li>作用域链(Scope chain)</li>\n<li>this</li>\n</ul>\n<p>变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p>\n<h2>活动对象(activation object, AO)</h2>\n<p>在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。</p>\n<p>不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活。</p>\n<p>进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。</p>\n<h2>进入执行上下文</h2>\n<p>当进入执行上下文时，这时候还没有执行代码。</p>\n<p>变量对象包括</p>\n<ul>\n<li>\n<p>函数的所有形参(如果是函数上下文)</p>\n<p>由名称和对应值组成的一个变量对象的属性被创建，没有实参（还没有执行代码），属性值设为 undefined</p>\n</li>\n<li>\n<p>函数声明</p>\n<p>由名称和对应值组成一个变量对象的属性被创建，如果变量对象已经存在相同名称的属性，则完全替换这个属性</p>\n</li>\n<li>\n<p>变量声明</p>\n<p>由名称和对应值（undefined）组成一个变量对象的属性被创建，如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">d</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 进入执行上下文栈，未执行</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AO</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arguments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// function c() {}</span>\n  <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 进入执行上下文栈，执行</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AO</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">arguments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// function c() {}</span>\n  <span class=\"token function-variable function\">d</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// var d = function() {};</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"JavaScript 高级用法学习总结","date":"2022-04-29","description":null,"author":"onlyling"}},"previous":{"fields":{"slug":"/frontEnd/css/less知识点/"},"frontmatter":{"title":"less 知识点"}},"next":{"fields":{"slug":"/frontEnd/css/cssModules/"},"frontmatter":{"title":"Css Modules"}}},"pageContext":{"id":"923158c9-2b80-5a4b-9560-5da3d6429e8a","previousPostId":"3d6bb6d7-67bc-5d27-bc4a-7d38af776ef6","nextPostId":"ea26f1e0-41b0-5fc3-935c-d13cb1e32af1"}},"staticQueryHashes":["2841359383","3257411868"]}