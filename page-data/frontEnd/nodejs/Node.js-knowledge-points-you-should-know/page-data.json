{"componentChunkName":"component---src-templates-blog-post-js","path":"/frontEnd/nodejs/Node.js-knowledge-points-you-should-know/","result":{"data":{"site":{"siteMetadata":{"title":"HJGP技术知识库"}},"markdownRemark":{"id":"e7bb832a-870a-559f-8010-e171f5fe5545","excerpt":"基础知识 Node.js 推荐使用版本号。 多版本 Node.js 共存可以使用 nvm，为什么会有这样的需求，比如说某个项目约定最低使用  及其以上的版本，因为提供了很多  化的 API，但是另一个项目打包工具依赖的某个库在高版本 Node.js 环境下会报错，某个 API 被删了。 Node.js…","html":"<h2>基础知识</h2>\n<p>Node.js 推荐使用<code class=\"language-text\">偶数</code>版本号。</p>\n<p>多版本 Node.js 共存可以使用 <a href=\"https://github.com/nvm-sh/nvm\">nvm</a>，为什么会有这样的需求，比如说某个项目约定最低使用 <code class=\"language-text\">14</code> 及其以上的版本，因为提供了很多 <code class=\"language-text\">promise</code> 化的 API，但是另一个项目打包工具依赖的某个库在高版本 Node.js 环境下会报错，某个 API 被删了。</p>\n<p>Node.js 遵守 <code class=\"language-text\">commonjs</code> 模块规范。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 模块导入</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./config.js\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 模块导出</span>\n<span class=\"token comment\">//一个一个 导出</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 为了方便，Node.js 在实现 CommonJS 规范时，为每个模块提供一个 exports 的私有变量，指向 module.exports。</span>\nexports<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n\n<span class=\"token comment\">//整体导出</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Node.js 12 之后开始支持 ECMAScript Modules（简称 ESM），不过并不是默认开启或者自动切换。</p>\n<p>想要开启 ESM，首先，（1） 你要使用 <code class=\"language-text\">--experimental-modules</code> 开启实验中的 ESM 支持。然后，（2） 所有的 <code class=\"language-text\">import</code> 都要写完整的文件名，不能省略扩展名。（3）package.json 中根属性 “type”: “module”。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a.mjs</span>\n<span class=\"token keyword\">import</span> message <span class=\"token keyword\">from</span> <span class=\"token string\">\"./b.mjs\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// b.mjs</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"hello world\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">node</span> --experimental-modules a.mjs</code></pre></div>\n<p>一般情况我们都是写 TypeScript 的，所以，Node.js 如何运行 TypeScript 代码呢。（1）使用 TypeScript 模块提供的 <code class=\"language-text\">tsc</code> 命令把 TypeScript 代码编译成 JavaScript 代码后运行，（2）使用 <a href=\"https://www.npmjs.com/package/ts-node\">ts-node</a> 直接运行。</p>\n<p>当项目中存在前后端同构的时候，依赖的第三方模块最好使用 <code class=\"language-text\">umd</code> 模块规范，这样在 Node.js 和浏览器都能使用。</p>\n<p><a href=\"https://cnodejs.org/topic/5c3d554fa4d44449266b1077\">浏览器与 Node 的事件循环(Event Loop)有何区别?</a>好消息是 Node.js 11 及其以后就和浏览器趋同。</p>\n<h2>Web 服务框架</h2>\n<p>Node.js 从早些年流行的 Express（回调函数模式），到后来 Koa（异步模式），再到现在各种各样。</p>\n<p>国外目前比较流行</p>\n<ol>\n<li>Hapi.js</li>\n<li>Express.js</li>\n<li>Nest.js</li>\n<li>Koa.js</li>\n<li>Socket.io</li>\n<li>Meteor.js</li>\n<li>Adonis.js</li>\n<li>Sails.js</li>\n</ol>\n<p>参考文档：<a href=\"https://juejin.cn/post/6955402195311263751\">2021 年最值得使用的 Node.js 框架</a></p>\n<p>国内使用比较多</p>\n<ol>\n<li>Egg.js</li>\n<li>ThinkJS</li>\n<li>Midway</li>\n</ol>\n<p>还有一些小众的</p>\n<ol>\n<li>Farrow<a href=\"https://zhuanlan.zhihu.com/p/341923365\">（类型友好的函数式风格 Node.js Web 框架）</a></li>\n<li>daruk</li>\n</ol>\n<h2>多进程</h2>\n<p>Node.js 官方提供了 Cluster 模块，通过复制/多启动相同应用的方式实现，可以参考 <a href=\"https://eggjs.org/zh-cn/core/cluster-and-ipc.html\">Egg.js 文档中多进程模型和进程间通讯章节</a>学习。</p>\n<p>目前部分 Web 服务框架已经自带多进程方案，如果想自己实现呢，比较简单的方式是使用 <a href=\"https://www.npmjs.com/package/pm2\">pm2</a> 进程管理模块，它可以帮助我们实现进程守护、多进程、监听文件自动重启等功能。比如在一些 SSR 项目（Next.js）中就可以使用它来维护应用一直运行着，同时 pm2 也支持运行 script 命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next -p 3030\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_HOST=production next build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_HOST=test next build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-online\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_HOST=online next build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_HOST=production next start -p 9800\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start-test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_HOST=test next start -p 9800\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start-online\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_HOST=online next start -p 9800\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pm2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pm2 start npm --name employment-portal -- run start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pm2-test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pm2 start npm --name employment-portal-test -- run start-test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pm2-online\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pm2 start npm --name employment-portal-online -- run start-online\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://github.com/Unitech/pm2/raw/master/pres/pm2-ls-v2.png\" alt=\"\"></p>\n<p>— name employment-portal 对应 id 后面的 name。</p>\n<p>使用多进程就不得不解决 session 共存的问题，为什么呢。</p>\n<p>某个应用启动了 4 个进程，端口分别是 33330、33331、33332、33333，用户 A 访问该应用会把请求随机分配到某个端口上，用户 A 在 33330 端口对应的进程上登录，并且把用户信息保存在 session 上，此时 http 请求头上就会有带有用户信息的 cookie，如果下次请求被分配到了 33332 都断对应的应用上，会识别出该用户吗？答案是不会。</p>\n<p>为了解决这个问题，需要把用户 session 在多个进程中共享，比如 <a href=\"https://www.npmjs.com/package/express-mysql-session\">express-mysql-session</a> 把 session 信息放到数据库中，在每次请求的中间件中通过查询数据库还原保存的 session，最常见的还是放置 <a href=\"https://www.npmjs.com/package/redis\">redis</a> 中，没有查询的过程，性能要好一些（可以把 redis 简单看做一个系统级 key value 共享对象）。</p>\n<h2>日志</h2>\n<p>首先应该学习如何打印日志，并不是所有地方都需要打印，打印时要记录关键信息方便时候找问题。</p>\n<p>首先要建立日志级别，例如 <code class=\"language-text\">FATAL</code>、<code class=\"language-text\">ERROR</code>、<code class=\"language-text\">WARN</code>、<code class=\"language-text\">INFO</code> 和 <code class=\"language-text\">DEBUG</code>，然后是日志内容格式，例如</p>\n<blockquote>\n<p>【ERROR】[YYYY-MM-DD HH:mm:ss] 系统名称/服务器编号 业务/服务名称 描述内容(例如入参 xxxx，查询失败，原因)</p>\n</blockquote>\n<p>确定好规范就该着手如何打印，pm2 可以把 Node.js 中的 console.log 之类的控制台日志收集到它的日志文件中，如果没得特殊需求可以考虑这样简单处理。</p>\n<p>如果有，例如日志按天分割、日志可视化查询等，就需要看看各种日志工具/模块是否符合需求。</p>\n<p><a href=\"https://juejin.cn/post/6978475844184309790\">Node.js 中间层日志方案选型</a></p>\n<p><a href=\"https://juejin.cn/post/7004715283449397261\">在 Nodejs 中日志监控的最佳实践</a></p>\n<p>winston 对日志查询友好一些。</p>\n<h2>ORM 工具</h2>\n<p>ORM 工具是什么呢，一种关系数据映射，例如数据库中有一个张表，里面有 id、userName、tel，可以映射为</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserModal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">queyr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// 一顿操作</span>\n    retun<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"名字\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tel</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// 一顿操作</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"名字\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tel</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 向数据库中插入数据</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过对象实例调用方法实现了对数据库表的操作，也可以通过 ORM 工具创建一张表。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">defineModal</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 自增、主键</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">allowNull</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">tableName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 同步创建表</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>有了 ORM 工具，即使不熟悉 SQL 语句也能做一些简单的增删改查。</p>\n<p>比较老牌的 ORM 工具是 <a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/\">Sequelize</a>，从 V5 版本开始对 TypeScript 有比较好的支持，还有 <a href=\"https://typeorm.io\">TypeORM</a> 也是支持 TypeScript，不过最近一段时间比较火的是 <a href=\"https://www.prisma.io/docs/getting-started\">Prisma</a>，可以阅读 <a href=\"https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/213.%E7%B2%BE%E8%AF%BB%E3%80%8APrisma%20%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%8B.md\">213.精读《Prisma 的使用》.md</a> 文章学习一下。</p>\n<h2>其他</h2>\n<ul>\n<li><a href=\"https://yjhjstz.gitbooks.io/deep-into-node/content/\">《深入理解 Node.js：核心思想与源码分析》</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000023650518\">了不起的 IoC 与 DI</a></li>\n<li><a href=\"https://github.com/Godiswill/blog/issues/22\">koa 源码分析</a></li>\n<li><a href=\"https://github.com/alsotang/node-lessons\">Node.js 包教不包会</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/tree/master/sections/zh-cn\">如何通过饿了么 Node.js 面试</a></li>\n<li><a href=\"https://github.com/chyingp/nodejs-learning-guide\">Node.js 学习笔记</a></li>\n<li><a href=\"https://github.com/nswbmw/node-in-debugging\">Node.js 调试指南</a></li>\n</ul>","frontmatter":{"title":"你应该知道的 Node.js 知识点","date":"2021-11-17","description":null,"author":"onlyling"}},"previous":{"fields":{"slug":"/frontEnd/其他/react-vite-typescript-antd-echarts/react-vite-typescript-antd-echarts/"},"frontmatter":{"title":"使用 Vite 创建 React+TypeScript+Antd+Echarts 开发环境"}},"next":{"fields":{"slug":"/frontEnd/react/从 Vue、React 类组件角度看 Hooks/"},"frontmatter":{"title":"从 Vue、React 类组件角度看 Hooks"}}},"pageContext":{"id":"e7bb832a-870a-559f-8010-e171f5fe5545","previousPostId":"4b612652-12ac-5d88-994a-b772149d583d","nextPostId":"315dabc7-d401-5762-a49c-f820c3f9e06c"}},"staticQueryHashes":["2841359383","3257411868"]}